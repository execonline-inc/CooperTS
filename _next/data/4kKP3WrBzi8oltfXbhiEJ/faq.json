{"pageProps":{"pages":[{"slug":"about-map","frontmatter":{"title":"What's All This About Map Then?","description":""},"markdown":{"content":"\n## Caveats and Disclaimers\n\nI make no guarantees that the code examples compile or execute. All code examples are syntactically similar to Typescript, but should be treated as pseudo-code. Also, I expect to reference behaviors (methods, etc) that actually don't exist in the JavaScript standard library (though it'd be nice if some of them did). I try to call out where I'm doing this, but really who knows if I got every case. The intent of this is not because I'm lazy (well, not exclusively because I'm lazy), but because I want to emphasize the concepts, and not muddy the waters of learning with the intricacies of the JavaScript implementation reality.\n\nWith that out of the way, on to the topic at hand...\n\n## But First... (a Pure Function Primer)\n\nBefore we tackle Map and AndThen, we should make sure that we are all on the same page about functions.\n\nIn the mathematical sense, a function is just a mapping from a Set of inputs to a Set of outputs. The output for any given input will always be the same. In the programming world, we call these functions \"pure\" functions. and they are becoming quite popular.\n\nPure functions are defined by having no side effects and always returning the same value for the same arguments.This idea is often called \"referential integrity\", which simply means that if you replace your function call with the value returned from the function, your program doesn't break.\n\nLet's take a moment to explore referential integrity. Given this function:\n\n### add2\n\n```typescript\nconst add2 = (n: number) => n + 2;\n```\n\nThen this program:\n\n### referential program 1\n\n```typescript\nadd2(2) === 4;\n```\n\nis identical to this program:\n\n### referential program 2\n\n```typescript\n4 === 4;\n```\n\nSo.. that was probably a tad underwhelming.\n\nNow let's consider a slightly different version of add2.\n\n### side effectual add2\n\n```typescript\nconst add2 = (n: number) => {\n  sendEngagement(`Someone added 2 to ${n}`);\n  return n + 2;\n};\n```\n\nNow when I replace add2(2) === 4 with 4 === 4, how many Product Managers am I going to have in my inbox in the morning because the add2 engagements are broken? Imagine trying to write tests for both versions of add2. Which one is easier?\n\nThe problem with the second version of add2 is that has side effects in addition to the computation we were expecting. Side effects could include mutating inputs, modifying global variables, I/O operations (reading writing to disk, http requests, reading environment variables, etc.). You can't have a meaningful program without side-effects, but a key tenant of CooperTS is that we want to separate our side effects from our business logic. This makes the business logic easier to write and understand, while isolating parts of the code that are going to fail at runtime.\n\nSo why did we go through all this just to talk about Map and AndThen? Well, the laws that govern how Map and AndThen work assume that the functions that are passed in are pure. Applying side effectual behaviors using Map and AndThen are generally discouraged as they subvert optimizations and logic that the mapping behavior is applying in the implementation. Map, after, all isn't just a stylistic preference for looping.\n\nWith all that out of the way, let's look at Map and AndThen as applied to Arrays.\n\n## The Array\n\nSo let's look at a map in the familiar context of an Array.\n\nBefore we begin, let's define some types to work with:\n\n### Types.ts\n\n```typescript\ninterface Encoding {\n  id: string;\n  name: string;\n}\n\ninterface Stream {\n  id: string;\n  codec: string;\n}\n\ninterface Video {\n  encoding: Encoding;\n  streams: Stream[]\n}\n\nconst videos: Video[] = // ... assume we initialized this array with videos\n```\n\nNow lets write a couple loops. One that gets all of the encoding ids from the list of videos, and another that gets all the stream ids from the list of videos:\n\n### Get you some encoding ids\n\n```typescript\nconst encodingIds: string[] = [];\n\nfor (let i = 0; i < videos.length; i++) {\n  const id = videos[i].encoding.id;\n  encodingIds.push(id);\n}\n\nconst streamIds: string[] = [];\n\nfor (let i = 0; i < videos.length; i++) {\n  const streams = videos[i].streams;\n\n  for (let j = 0; j < streams.length; j++) {\n    const id = streams[j].id;\n    streamIds.push(id);\n  }\n}\n```\n\nIf you read this code honestly, you have to admit that it's mostly loop management and state initialization; low level concepts that muddy up our business concerns.\n\nNow let's extract the \"business logic\" into some functions:\n\n### Functions.ts\n\n```typescript\nconst getId = <T extends { id: string }>(thing: T): string => thing.id;\n\nconst getStreams = (video: Video): Stream[] => video.streams;\n\nconst getEncoding = (video: Video): Encoding => video.encoding;\n```\n\nAnd we'll try again:\n\n### Loops redeux\n\n```typescript\nconst encodingIds: string[] = [];\n\nfor (let i = 0; i < videos.length; i++) {\n  const id = getId(getEncoding(videos[i]));\n  encodingIds.push(id);\n}\n\nconst streamIds: string[] = [];\n\nfor (let i = 0; i < videos.length; i++) {\n  const streams = getStreams(videos[i]);\n\n  for (let j = 0; j < streams.length; j++) {\n    const id = getId(streams[j]);\n    streamIds.push(id);\n  }\n}\n```\n\nIs this better? Well, each piece of business logic is much easier to test now. But we're still doing loop maintenance and state management, and depending on how you feel about reading functions vs. dot notation, this might be harder for you to read.\n\nLet's look again at the encoding ids example, this time using map:\n\n### Encoding IDs, Mapped edition\n\n```typescript\nconst encodingIds: string[] = videos.map(getEncoding).map(getId);\n```\n\nAnd that's all she wrote. Loop maintenance is gone. State management is gone. All that's left are the declarations of what the logic is doing.\n\n\"So tell me...\", you may be thinking. \"How does map work?\"\n\nLet us now take a look at a hypothetical implementation of map in a hypothetical Array class:\n\n### Map's Guts\n\n```typescript\nclass Array<A> {\n  //... a bunch of stuff that makes arrays arrays\n  map = <B>(fn: (a: A) => B): Array<B> => {\n    const newArray: B[] = [];\n\n    for (let i = 0; i < this.length; i++) {\n      const b = fn(this[i]);\n      newArray.push(b);\n    }\n\n    return newArray;\n  };\n}\n```\n\nSo that's where all the loop maintenance and state management went!? Indeed. This is the power of map: It abstracts away low level considerations, and surfaces only the business concerns.\n\nNow I want to take a look at the signature of the fn argument in map and compare it to our business logic functions:\n\n### Map Signature\n\n```typescript\nfn: (a: A) => B\n\ngetId: (thing: T): string\n\ngetStreams: (video: Video): Stream[]\n\ngetEncoding: (video: Video): Encoding\n```\n\nEvery single one of our business logic functions is compatible with map. And this will be true of any pure function. As long as it takes a single argument (or can be curried down to take a single argument) then that function can be used with map. And we can see in the array example that map frees up a lot of mental bandwidth, freeing up cycles that were once devoted to tracking loop and state details but can now be applied to solving actual application space problems.\n\nThis idea of map abstracting away low level details is powerful. In the array, it hides looping and state mutation. But imagine if all of your ugly, side effectual, state management details could be modeled as mappable data structures. In that world, all of your business logic could be written in easily tested, easily reasoned about, type checkable, pure functions. No mocks. No browser. No environment considerations. WOW!\n\nOf course, when everything seems rosy, there's always something that comes along and throws a wrench in the works. Let's see what happens when we apply map the stream ids case:\n\n### map stream ids\n\n```typescript\nconst streamIds: string[] = videos.map(getStreams).map((streams) => streams.map(getId));\n```\n\nUgh... getStreams is breaking my beautiful code. Since it returns an array, I have to nest a map inside another map; abstraction details are leaking out. Also, this won't compile because I've declared that I need a string[], but I'm actually getting a string[][]. Ay caramba!\n\nWe could fix the compiler error with something intensely JavaScripty, like this:\n\n### Intense JavaScript\n\n```typescript\nconst tempStreamIds: string[][] = videos.map(getStreams).map((streams) => streams.map(getId));\n\nconst streamIds: string[] = [].concat.apply([], tempStreamIds);\n```\n\nIt should compile now, but so help me... I need to know how JavaScript functions can be applied; the lowest of low level details. Calgon, take me away.\n\nWhat would be great here, is if we had a function like map, but instead of appending the results of the map function (fn), it concatenated them. What would we call such a function? How about concatMap? Let's look at a hypothetical implementation of concatMap:\n\n### concatMap\n\n```typescript\nclass Array<A> {\n  //... a bunch of stuff that makes arrays arrays\n  concatMap = <B>(fn: (a: A) => B[]): Array<B> => {\n    let newArray: B[] = [];\n\n    for (let i = 0; i < this.length; i++) {\n      const bs = fn(this[i]);\n      newArray = newArray.concat(bs);\n    }\n\n    return newArray;\n  };\n}\n```\n\nHeavens to Betsy, that looks a lot like map, doesn't it? The differences are that the fn function argument must return an array, and those arrays are being concatenated, rather then appended.\n\nWell, now that we have concatMap, let's go back and fix our streamIds:\n\n### fixed stream ids\n\n```typescript\nconst streamIds: string[] = videos.concatMap(getStreams).map(getId);\n```\n\nPhew... that is so much nicer.\n\nIn this section we've seen that map and it's close sibling concatMap are incredibly handy abstractions to have around. They de-emphasize low level details allowing us to re-emphasize business logic. In many cases, that leads to purely functional application logic that is easily tested and easily reasoned about.\n\nThat's a lot to take in. Why don't we take a break here and enjoy a Blueberry Acai Diet Coke before moving on to the next section?\n\n## Walk-thru of Map\n\nTo make sure we clearly understand what is going on here, let's walk through the map implementation for arrays. Here is the code again...\n\n### Map's Guts\n\n```typescript\nclass Array<A> {\n  //... a bunch of stuff that makes arrays arrays\n  map = <B>(fn: (a: A) => B): Array<B> => {\n    const newArray: B[] = [];\n\n    for (let i = 0; i < this.length; i++) {\n      const b = fn(this[i]);\n      newArray.push(b);\n    }\n\n    return newArray;\n  };\n}\n```\n\nLine 4: When we enter into map, the first thing that happens is a new Array is instantiated.\n\nLine 7: Then, we apply fn to each item in the array.\n\nLine 8: The result of that function call is appended to the new array.\n\nLine 11. Then we return the new array.\n\nIn the case where the array is empty, the looping logic falls through and we simply return the new, empty array.\n\n## Walk-thru of concatMap\n\nNow we'll do the same walk through, but with concatMap. Here's the code again:\n\n### concatMap\n\n```typescript\nclass Array<A> {\n  //... a bunch of stuff that makes arrays arrays\n  concatMap = <B>(fn: (a: A) => B[]): Array<B> => {\n    let newArray: B[] = [];\n\n    for (let i = 0; i < this.length; i++) {\n      const bs = fn(this[i]);\n      newArray = newArray.concat(bs);\n    }\n\n    return newArray;\n  };\n}\n```\n\nLine 4: When we enter into concatMap, we start by create a new array (same as with map)\n\nLine 7: Then we apply fn to each item in the array. In the case of concatMap, the result from fn will be another array.\n\nLine 8: Next we concatenate the array from line 7, onto the new array that we are constructing.\n\nLine 11: Finally, we return our new array, which is flattened out without any nesting.\n\nIn the case where the array is empty, the loop logic falls through and the empty array is returned.\n\n## Other Mappable Types\n\nWe can now take this understanding of map and concatMap and apply it to other mappable types. For example, let's create a data type that represents an optional value. This is a type that can replace the use of undefined. It encapsulates checks for undefined in one place, and makes it possible to cleanly chain together computations on values that may or may not be available.\n\nLet's start with a simple class definition for Optional:\n\n```typescript\nclass Optional<A> {\n  public static some = <A>(value: A) => {\n    return new Optional<A>(value);\n  };\n\n  public static none = <A>() => {\n    return new Optional<A>();\n  };\n\n  private value?: A;\n\n  private constructor(value?: A) {\n    this.value = value;\n  }\n\n  // ... more to come\n}\n```\n\nThis class has a private value that could be undefined, or it could be some generic type of A.\n\nSo far we can construct some value or we can construct a none value, but since the value is private, we can't do anything with it. Let's add a map method first, so we can at least get at the value. As we read this code, try to keep the Array map intuition in mind. The None case is like having an empty array, and the Some case is like having a one item array. Let's write this:\n\n```typescript\nclass Optional<A> {\n  // ... constructors and stuff\n\n  map = <B>(fn: (a: A) => B) => {\n    return typeof this.value !== 'undefined' ? Optional.some(fn(this.value)) : Optional.none();\n  };\n}\n```\n\nBecause there is no looping construct here, this logic is a bit more direct. We check if the value is defined. If it is, we apply fn to the value and return it wrapped in a new some. Otherwise, we return none.\n\nThe concatMap implementation is equally direct.\n\n```typescript\nclass Optional<A> {\n  // ... constructors and stuff\n\n  concatMap = <B>(fn: (a: A) => Optional<B>) => {\n    return typeof this.value !== 'undefined' ? fn(this.value) : Optional.none();\n  };\n}\n```\n\nNow we can compose operations that may fail or return no results in the same way we could chain those calls to an array. For example:\n\n```typescript\nconst add =\n  (n1: number) =>\n  (n2: number): n => {\n    return n1 + n2;\n  };\n\nconst safeDiv =\n  (dividend: number) =>\n  (divisor: number): Optional<number> => {\n    return divisor === 0 ? Optional.none() : Optional.some(dividend / divisor);\n  };\n\nOptional.some(2).map(add(-2)).concatMap(safeDiv(4));\n```\n\nRather then producing NaN, this code will return None if the division fails (divide by zero error). That makes it easier to chain operations together.\n\n## Some Final Notes\n\nWe've demonstrated the logic behind map and concatMap in terms of Arrays, so that we can leverage that intuition and apply it to other mappable types. We've even looked at some hypothetical implementations of map and concatMap to help our understanding.\n\nWhen developing using CooperTS, our default optional value is actually called Maybe. But the logic and implementation details are applicable, only the names have been changed.\n\nAlso note, concatMap can be known by many names: bind, chain, flatMap,, >>=, etc. In CooperTS libraries like Maybeasy, Taskarain, and Jsonous, concatMap is named andThen.\n\nAnd now you know the rest of the story.\n"}},{"slug":"billion-dollar-mistake","frontmatter":{"title":"Avoiding The Billion Dollar Mistake","description":""},"markdown":{"content":"\nTony Hoare famously called NULL his \"billion dollar mistake\". In this post, we'll explore what null (and undefined) is, where it came from, and why we feel it is an inappropriate abstraction to use in modern business software development. We'll also explore how to program without null using CooperTS friendly libraries and patterns.\n\n## The Birth of NULL\n\n> I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\n>\n> --- Tony Hoare (C.A.R. Hoare)\n\nNull references were originally created as a stand-in value for pointers that don't actually point to valid memory. This effectively breaks early type systems. Since the NULL reference can inhabit any types, the programmer is responsible for checking every single reference to ensure that it is not a NULL reference. So this puts the responsibility of safety and security into the hands of the programmers. regardless of their experience and motivation. In most programming languages, dereferencing a null pointer results in an immediate program crash. This is usually the result of one or more developer assumptions being violated (put a pin in that). This leads to reliability problems, but Null pointer exceptions can also be used by attackers to bypass security checks or produce a core dump, revealing details about the program that can aid future attacks.\n\nOver the years, many programming languages (Java, C#, etc,) have developed safe memory models to reduce the security risks of NULL pointer references, but many of those languages continue to allow NULL references to inhabit any type.\n\n## The Nullable Type\n\nSome programming languages don't specifically support a NULL reference, but instead implement a Nullable type. Ruby, for example, uses NilClass to represent the concept of NULL. A nullable type can be safely dereferenced, but as Ruby developers can attest, you still suffer from reliability problems. Sending an unsupported method to the nullable type still results in an immediate crash.\n\nMany programming languages that support Nullable types also support a \"safe\" dereference operator. Newer versions of Ruby (>= 2.3), for example, use the &. operator to allow any method to be safely sent to the NilClass object. The problem with this operator is that, while the program doesn't crash, an unexpected Nullable type still represents a violation of developer assumptions. So, while the program may not crash, there is likely still a bug. How this bug will ultimately manifest is undetermined.\n\n## The Null Object Pattern\n\nA user space extension of the Nullable Type that some OO programmers favor is the Null Object pattern. In this pattern, a stand-in object is used to represent the absence of a value. The stand-in object upholds the interface contract of whatever object it stands-in for. Null objects then act as a no-op for side-effectual method calls, and returns a sensible default value for query method calls. Implementing the Null Object pattern across a large code base can lead to a fairly complex object graph. If you decide to go all in on Null Objects, you need to implement Null Objects for all of your business objects and then you also need to keep your null objects implementations in sync with the actual implementation. This is often error prone and tedious.\n\nAnother side effect of the Null object pattern is that, from object oriented principles, the caller should not know if it has the Null Object or the real object. But some business decisions are based on knowing if you have Nothing or Something. In this case, you are back to needing to understand the difference between having nothing and having a real value.\n\n## The Optional Type\n\nThere is a significant impedance mismatch that comes from trying to use a low level memory abstraction to also represent a high level concept of a missing value. Some language developers (mostly typed languages) acknowledge this by NOT having NULL references and providing an Optional data type. This type is usually called Option or Maybe, depending on the language.\n\nOptional types make the concept of Nothing (None) an explicit and first class value. Any other type can be stored in an Optional type (integers, strings, object, arrays, etc.) And it provides a consistent and reliable interface for getting at the optional values and in the case where the value isn't available, operations against an optional type short circuit, resulting in... Nothing.\n\nOptional types can be composed through their functor or monad interfaces. They encapsulate the nothing checking so that the developer isn't required to remember to perform those checks. It also requires developers to explicitly declare when values can be optional or not, removing the risk that bugs will result from incorrect developer assumptions.\n\n## Rolling with Optional\n\nRather then relying on the leaky NULL abstraction, we prefer Optional types in CooperTS. It's an explicitly declared type who's intent is to express the concept of Nothing vs. Something. It is preferred for its consistent interface and for the security and reliability taking null checking out of the hands of developers.\n"}},{"slug":"getorelse-vs-getorelsevalue","frontmatter":{"title":"When to Use Which - getOrElse vs getOrElseValue","description":""},"markdown":{"content":"\nThe CooperTS monads have two options for extracting a value from the context; `getOrElseValue` and `getOrElse`. These are not interchangeable. Be careful when choosing which one to use.\n\n## getOrElseValue\n\nThis method is strict. The value passed to this is evaluated even if it is never needed. This option should be chosen for any value that is less expensive than an anonymous function and has no side effects.\n\nIn the context of React component rendering, choosing this can lead to bugs because you could be eagerly instantiating a component that may have side effects.\n\n## getOrElse\n\nThis method is lazy. The function passed to this is only evaluated when it is to be used. This is the option for any value that is more expensive than function construction or if the computation has side effects.\n"}},{"slug":"imperative-vs-declarative","frontmatter":{"title":"Imperative vs Declarative Programming","description":""},"markdown":{"content":"\n## Imperative\n\nImperative programming refers to a style of programming where programming statements change the state of the program. Imperative style is a bit of a leaky abstraction because it involves manipulating memory. Many developers prefer imperative programming because it appears to grant the developer more control over the execution of the program. It also tends to lead to an interleaving of lower level programming concepts (allocating memory) with higher level concepts (business rules). This can result in a hiding of the actual intent of the code.\n\nC, Java, JavaScript, etc. tend to be imperative programming languages.\n\n## Declarative\n\nDeclarative programming refers to a style of programming where higher level expressions describe the behavior of the program without describing the flow control. This style prevents the interleaving of business logic with lower level algorithmic concerns. This makes is easier to swap out implementations and improve the performance at a lower level, without touching the business logic. This valuable separation of concerns can lead to programs that are easier to understand and maintain.\n\nSQL is an example of a declarative language.\n"}},{"slug":"map-vs-andthen","frontmatter":{"title":"When To Use Which - map vs. andThen","description":""},"markdown":{"content":"\nmap and andThen are very similar operations and so developers new to functors and monads are often confused about when to apply which operations. The easiest way to make that decision is to allow the types to guide you. But if you are also new to type systems, this is not very helpful advice. So let’s walk through an example following the types.\n\n## The Types\n\nFor our contrived example, we’ll assume we are working with a simple library for converting dates to strings and strings to date. This library consists of two functions. Their type signatures are presented here:\n\n```typescript\nconst dateToString = (date: Date) => string;\n\nconst stringToDate = (candidate: string) => Maybe<Date>;\n```\n\nEven without the implementations, these type signatures convey a lot of information. The `dateToString` function maps a Date type to a string type, and every Date can be converted to a string. The `stringToDate` function maps a string to a Date, but since it returns `Maybe<Date>` we know that not every string produces a valid date.\n\n## Map\n\nGiven that we have a type of `Maybe<Date>`, then we will have functor and monad interfaces with the following type signatures:\n\n```typescript\n.map<S>(fn:  (value:  Date)  =>  S):  Maybe<S>\n\n.andThen<S>(fn:  (value:  Date)  =>  Maybe<S>):  Maybe<S>\n```\n\nIf we are hoping to convert the Date to a string, then we must use `dateToString`. In this scenario, one of these interfaces will never work. Using `dateToString` with `andThen` will not even compile. So our only option here is to use `map`.\n\nUsing `dateToString` converts our functor type signature to this:\n\n```typescript\n.map<string>(dateToString): Maybe<string>\n```\n\nI’m being explicit here, but typescript will infer the return type from the function being passed. So in practice, this can usually just be written as:\n\n```typescript\n.map(dateToString)\n```\n\nThis is what makes functors extremely powerful. We can now use this simple function in any context that is represented by a functor (ie. implements `map`). Result, Task, Decoder, NonEmptyList, Array; this function will work unchanged in any of them.\n\n## AndThen\n\nGiven a type of `Maybe<string>`, then we will have functor and monad interfaces with the following type signatures:\n\n```typescript\n.map<S>(fn:  (value:  string)  =>  S):  Maybe<S>\n\n.andThen<S>(fn:  (value:  string)  =>  Maybe<S>):  Maybe<S>\n```\n\nIf we need to convert the string to a Date, then we will need to use our `stringToDate` function. We can use `.map` in this case too, but it may not be what we want. Let’s look at the type signature and see why that might be.\n\n```typescript\n.map<Maybe<Date>>(stringToDate):  Maybe<Maybe<Date>>\n```\n\nThis will compile, but you can see that we have a Maybe type nested within another Maybe. This nesting of a monad within the same type of monad is a red flag for maintainability and clarity. Let’s see what happens when we use the monad interface:\n\n```typescript\n.andThen<Date>(stringToDate):  Maybe<Date>\n```\n\nThis is much easier to maintain. We lose the nesting when we use the monad interface.\n\nThe downside to the monad interface is that our `stringToDate` function is specific to Maybe. This requires us to write new versions of the function to work with other monads. However, it is easy enough to convert a Maybe type to other monads as appropriate. In fact, `toResult` and `toTask` helpers already exist for converting between these types.\n\n## Summary\n\nHopefully, this helps to clarify when it is best to use `map` vs. `andThen`.\n"}},{"slug":"monads","frontmatter":{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","description":""},"markdown":{"content":"\nThere is often confusion about when to use each of these types since they have such similar interfaces.\n\nThe first thing to understand about these types is that their similarity is because they are all Monads. All monads will have the same interface, though they may have different uses. In some cases, the difference will be obvious. In some cases, it may be just the difference of intent. We’ll explore these differences by first looking at monads that have obviously different purposes.\n\n## Monads\n\nA Monad is a data abstraction that allows programs to be structured generically. A particular Monad represents a specific form of computation. The consistent interface allows programs to look the same, regardless of the nature of the computation being performed.\n\nWe’ll discuss the most commonly used monads in our system here, but there is no real limit to the types of computations that monads can represent. But the goal of the abstraction is to separate the lower-level abstraction from the higher-level abstraction, level the purpose of the code clear.\n\n### Lists (Nonempty Lists)\n\nA List monad is used when we are expecting the result of a computation to be indeterminate. If I ask for people named “Smith”, I may be zero people or I may get 100 people. The key is that I don’t know ahead of time how large the result set of the computation is.\n\nIn the case of a non-empty list, the computation is expected to produce at least one result.\n\n### Decoders\n\nA decoder is used when a computation must rely on an unknown data type. With decoders, we can validate unknown data and transform it into something useful in the application context.\n\n### Maybe\n\nMaybe is used for computations that may fail, but the failure either isn’t an error condition, or the reason for the failure isn’t important. For example, using our find function on an array returns a Maybe type, because the value may not be in the array.\n\nMaybe is strongly preferred over using null, undefined, empty string, -1, or any other imperative style representations of computational failure.\n\n### Result\n\nResult is used for computations that may fail, but the reason for the failure is important. Decoders use Result types internally to handle the error reporting.\n\n### Task\n\nA Task is used for computations that may fail and the reason for failure is important. They differ from Results though because it is a lazy abstraction. The computation isn’t run until the Task is forked. This makes Tasks ideal for asynchronous operations.\n\nTasks are more determinate and have fewer foot guns than Promises.\n"}}],"navTree":[{"title":"About","href":"/about","links":[]},{"title":"Guide","href":"/guide","links":[{"title":"Maybe Adapter","href":"/guide/maybe"},{"title":"CooperTS - Practical Patterns","href":"/guide/practical-patterns"},{"title":"Translations Package","href":"/guide/translations"}]},{"title":"Examples","href":"/examples","links":[{"title":"Task Manager App","href":"/examples#task-manager-app"},{"title":"Cellular Automata Emulator","href":"/examples#cellular-automata-emulator"},{"title":"This Doc Site 😁","href":"/examples#this-doc-site"}]},{"title":"Frequently Asked Questions","href":"/faq","links":[{"title":"What's All This About Map Then?","href":"/faq/about-map"},{"title":"Avoiding The Billion Dollar Mistake","href":"/faq/billion-dollar-mistake"},{"title":"When to Use Which - getOrElse vs getOrElseValue","href":"/faq/getorelse-vs-getorelsevalue"},{"title":"Imperative vs Declarative Programming","href":"/faq/imperative-vs-declarative"},{"title":"When To Use Which - map vs. andThen","href":"/faq/map-vs-andthen"},{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","href":"/faq/monads"}]},{"title":"Packages","href":"/packages","links":[{"title":"ajaxian","href":"/packages/ajaxian"},{"title":"ajaxios","href":"/packages/ajaxios"},{"title":"@kofno/cute","href":"/packages/cute"},{"title":"@kofno/gaia","href":"/packages/gaia"},{"title":"jsonous","href":"/packages/jsonous"},{"title":"maybeasy","href":"/packages/maybeasy"},{"title":"nonempty-list","href":"/packages/nonempty-list"},{"title":"@kofno/piper","href":"/packages/piper"},{"title":"resulty","href":"/packages/resulty"},{"title":"@kofno/stack-ts","href":"/packages/stack-ts"},{"title":"taskarian","href":"/packages/taskarian"},{"title":"@execonline-inc/appy","href":"/packages/appy"},{"title":"@execonline-inc/collections","href":"/packages/collections"},{"title":"@execonline-inc/decoders","href":"/packages/decoders"},{"title":"@execonline-inc/dom","href":"/packages/dom"},{"title":"@execonline-inc/environment","href":"/packages/environment"},{"title":"@execonline-inc/error-handling","href":"/packages/error-handling"},{"title":"@execonline-inc/logging","href":"/packages/logging"},{"title":"@execonline-inc/maybe-adapter","href":"/packages/maybe-adapter"},{"title":"@execonline-inc/numbers","href":"/packages/numbers"},{"title":"@execonline-inc/resource","href":"/packages/resource"},{"title":"@execonline-inc/strings","href":"/packages/strings"},{"title":"@execonline-inc/time","href":"/packages/time"},{"title":"@execonline-inc/time-distance","href":"/packages/time-distance"},{"title":"@execonline-inc/translations","href":"/packages/translations"},{"title":"@execonline-inc/url","href":"/packages/url"}]}]},"__N_SSG":true}
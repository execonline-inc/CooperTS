{"pageProps":{"packageData":{"slug":"nonempty-list","metadata":{"name":"nonempty-list","description":"A list that always has at least one thing in it."},"markdown":{"content":"# NonEmpty List\n\nAn immutable data structure that acts like a list but guarantees that the list always has at least \none item.\n\n## Constructor\n\nBecause a `NonEmptyList<T>` guarantees the presence of at least one `T`, the constructor requires\na `T` object.\n\n```typescript\nconst strings = new NonEmptyList('hello', ['world'])\nconst numbers = new NonEmptyList(1, [2, 3, 4])\n```\n\n## Other Construction Functions\n\n### `fromValue`\n\nCreate a `NonEmptyList<T>` from a single `T`.\n\n```typescript\nconst numbers = fromValue(1); // Equivalent to new NonEmptyList(1, [])\n```\n\n### `fromArray`\n\nCreate a `NonEmptyList<T>` from an `Array<T>`, returning a [`Result<string, NonEmptyList<T>>`]. If \nthe array is empty return an error result, otherwise return a new non-empty list in an okay result.\n\nUseful when the array is not known statically.\n\n```typescript\nconst someArrayOfNumbers: Array<number> = calculateOrFetchTheArray();\nconst numbers: Result<string, NonEmptyList<number>> = fromArray(someArrayOfNumbers)\n```\n\n[`Result<string, NonEmptyList<T>>`]: https://github.com/kofno/festive-possum/tree/main/packages/resulty\n\n### `fromArrayMaybe`\n\nSimilar to `fromArray`, but return a [`Maybe<NonEmptyList<T>>`]. Useful when the array is not known\nstatically.\n\n```typescript\nconst someArrayOfNumbers: Array<number> = calculateOrFetchTheArray();\nconst numbers: Maybe<NonEmptyList<number>> = fromArrayMaybe(someArrayOfNumbers)\n```\n\n[`Maybe<NonEmptyList<T>>`]: https://github.com/kofno/festive-possum/tree/main/packages/maybeasy\n\n## Attributes\n\n### `first`\n\nThe first element in the list, guaranteed to exist.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.first // 1\n```\n\n### `rest`\n\nAn array of the rest of the elements in the list. May be empty.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.rest // [2, 3, 4]\n\nconst strings = new NonEmptyList('hello world', [])\nstrings.rest // []\n```\n\n### `length`\n\nThe number of elements in the list.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.length // 4\n```\n\n## Methods\n\n### `reverse`\n\nReturns a new `NonEmptyList` with the items reversed.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nconst reversed = numbers.reverse()\nnumbers.first // 1\nreversed.first // 4\n```\n\n### `includes`\n\nIndicate whether the list includes some value.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.includes(2) // true\nnumbers.includes(8) // false\n```\n\n### `take`\n\nReturn an array of the first `count` elements.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.take(2) // [1, 2]\n```\n\n### `drop`\n\nReturn an array after dropping the first `count` elements.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.drop(2) // [3, 4]\n```\n\n### `concat`\n\nTakes either an `Array` or another `NonEmptyList`, and returns a new `NonEmptyList` with the current\nand given lists concatenated.\n\n\n```typescript\nconst firstTwo = new NonEmptyList(1, [2])\nconst numbers = firstTwo.concat([3, 4])\nnumbers.first // 1\nnumbers.rest // [2, 3, 4]\n```\n\n### `every`\n\nSimilar to [`Array.prototype.every()`]: for some predicate, does every element in the list return\n`true`?\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.every(n => n < 5) // true\nnumbers.every(n => n < 4) // false\n```\n\n[`Array.prototype.every()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n### `some`\n\nSimilar to [`Array.prototype.some()`]: for some predicate, does some element in the list return \n`true`?\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.some(n => n < 4) // true\nnumbers.some(n => n > 4) // false\n```\n\n[`Array.prototype.some()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n### `find`\n\nAttempt to find an element where the given predicate returns `true`. Return [`Maybe<T>`].\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.find(n => n < 4) // just(1)\nnumbers.find(n => n > 4) // nothing()\n```\n\n[`Maybe<T>`]: https://github.com/kofno/festive-possum/tree/main/packages/maybeasy\n\n### `map`\n\nSimilar to [`Array.prototype.map()`]: create a new `NonEmptyList` by evaluating the callback for\nevery item in the current list.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nconst mapped = numbers.map(n => n * 2).map(String)\nmapped.first // \"2\"\nmapped.rest // [\"4\", \"6\", \"8\"]\n```\n\n[`Array.prototype.map()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n### `and`\n\nAlias of [`map`](#map).\n\n### `andThen`\n\nSimilar to [`Array.prototype.flatMap()`]. Given a callback that returns a new `NonEmptyList<U>` when\nevaluated on an item `T`, return the result of mapping over the current list, and then flattening\nall the new lists into a single `NonEmptyList<U>`.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nconst createPair = (n: number) => new NonEmptyList(n, [n])\nconst pairs = numbers.andThen(createPair)\npairs.first // 1\npairs.rest // [1, 2, 2, 3, 3, 4, 4]\n```\n\n[`Array.prototype.flatMap()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\n\n### `reduce`\n\nSimilar to [`Array.prototype.reduce()`]: \"reduce\" the array of values into a single value.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.reduce((sum, n) => sum + n) // 10\n```\n\n[`Array.prototype.reduce()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\n### `filter`\n\nSimilar to [`Array.prototype.filter()`]: return an `Array` of values for which some predicate\nreturns `true`.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.filter(n => n % 2 === 0) // [2, 4]\n```\n\n[`Array.prototype.filter()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\n### `sort`\n\nReturns a new `NonEmptyList` with the items sorted using [`Array.prototype.sort()`].\n\n```typescript\nconst scrambled = new NonEmptyList(3, [1, 4, 2])\nconst sorted = numbers.sort()\nscrambled.first // 3\nsorted.first // 1\n```\n\n[`Array.prototype.sort()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n### `join`\n\nEquivalent to [`Array.prototype.join()`].\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.join(', ') // \"1, 2, 3, 4\"\n```\n\n[`Array.prototype.join()`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n\n### `toArray`\n\nReturn an `Array` of the elements in the list.\n\n```typescript\nconst numbers = new NonEmptyList(1, [2, 3, 4])\nnumbers.toArray() // [1, 2, 3, 4]\n```\n"}},"navTree":[{"title":"Guide","links":[{"title":"Maybe Adapter","href":"/guide/maybe"},{"title":"CooperTS - Practical Patterns","href":"/guide/practical-patterns"},{"title":"Translations Package","href":"/guide/translations"}]},{"title":"Packages","links":[{"title":"ajaxian","href":"/packages/ajaxian"},{"title":"ajaxios","href":"/packages/ajaxios"},{"title":"@kofno/cute","href":"/packages/cute"},{"title":"@kofno/gaia","href":"/packages/gaia"},{"title":"jsonous","href":"/packages/jsonous"},{"title":"maybeasy","href":"/packages/maybeasy"},{"title":"nonempty-list","href":"/packages/nonempty-list"},{"title":"@kofno/piper","href":"/packages/piper"},{"title":"resulty","href":"/packages/resulty"},{"title":"@kofno/stack-ts","href":"/packages/stack-ts"},{"title":"taskarian","href":"/packages/taskarian"},{"title":"@execonline-inc/appy","href":"/packages/appy"},{"title":"@execonline-inc/collections","href":"/packages/collections"},{"title":"@execonline-inc/decoders","href":"/packages/decoders"},{"title":"@execonline-inc/dom","href":"/packages/dom"},{"title":"@execonline-inc/environment","href":"/packages/environment"},{"title":"@execonline-inc/error-handling","href":"/packages/error-handling"},{"title":"@execonline-inc/logging","href":"/packages/logging"},{"title":"@execonline-inc/maybe-adapter","href":"/packages/maybe-adapter"},{"title":"@execonline-inc/numbers","href":"/packages/numbers"},{"title":"@execonline-inc/resource","href":"/packages/resource"},{"title":"@execonline-inc/strings","href":"/packages/strings"},{"title":"@execonline-inc/time","href":"/packages/time"},{"title":"@execonline-inc/time-distance","href":"/packages/time-distance"},{"title":"@execonline-inc/translations","href":"/packages/translations"},{"title":"@execonline-inc/url","href":"/packages/url"}]},{"title":"Frequently Asked Questions","links":[{"title":"What's All This About Map Then?","href":"/faq/about-map"},{"title":"Avoiding The Billion Dollar Mistake","href":"/faq/billion-dollar-mistake"},{"title":"When to Use Which - getOrElse vs getOrElseValue","href":"/faq/getorelse-vs-getorelsevalue"},{"title":"Imperative vs Declarative Programming","href":"/faq/imperative-vs-declarative"},{"title":"When To Use Which - map vs. andThen","href":"/faq/map-vs-andthen"},{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","href":"/faq/monads"}]}]},"__N_SSG":true}
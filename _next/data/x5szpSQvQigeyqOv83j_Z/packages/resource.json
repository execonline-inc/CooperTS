{"pageProps":{"packageData":{"slug":"resource","metadata":{"name":"@execonline-inc/resource","description":"Models JSON api resources "},"markdown":{"content":"# `resource`\n\nThe `resource` package provides types and functions for dealing with HATEOAS REST resources.\n\n## Usage\n\nCreate a module dedicated to resources and export as necessary.\n\n```ts\nimport {\n  Link as LinkR,\n  payload as payloadR,\n  Resource as ResourceR,\n  resource as resourceR,\n  ResourceWithErrors as ResourceWithErrorsR,\n  ResourceWithMetadata as ResourceWithMetadataR,\n} from '@execonline-inc/resource';\nimport { Result } from 'resulty';\n\nconst rels = ['prev', 'next', 'self'] as const;\n\nexport type Rel = typeof rels[number];\n\nexport const toRel = (value: string): Result<string, Rel> =>\n  toResult(\n    `Expected to find an HTTP rel string. Instead I found ${value}`,\n    find(rel => rel === value, rels)\n  );\n\nexport type Link = LinkR<Rel>;\nexport type Resource<T> = ResourceR<T, Rel>;\nexport type ResourceWithErrors<T> = ResourceWithErrorsR<T, Rel>;\nexport type ResourceWithMetadata<T, M> = ResourceWithMetadataR<T, M, Rel>;\n\nexport const resource: <T>(links: ReadonlyArray<Link>, payload: T) => Resource<T> = resourceR;\nexport const payload: <T, R extends Resource<T>>(r: R) => T = payloadR;\n```\n\n## Types\n\n### `ResourceCollection`\n\n```ts\nimport { Empty, None, Results } from '@execonline-inc/resource';\n\ntype ResourceCollection<T, Rel extends string> = None | Empty | Results<T, Rel>;\n```\n\n### `None`\n\n```ts\ninterface None {\n  kind: 'none';\n}\n```\n\n### `Empty`\n\n```ts\ninterface Empty {\n  kind: 'empty';\n}\n```\n\n### `Results`\n\n```ts\nimport { Resource } from '@execonline-inc/resource';\n\ninterface Results<T, Rel extends string> {\n  kind: 'results';\n  results: Resource<T[], Rel>;\n}\n```\n\n### `Link`\n\n```ts\nimport { Method } from 'ajaxian';\n\ninterface Link<Rel extends string> {\n  rel: Rel;\n  href: string;\n  method: Method;\n  type: string;\n}\n```\n\n### `ServerError`\n\n```ts\ninterface ServerError {\n  type: string;\n  param: string;\n  message: string;\n  code: string;\n  source: string;\n}\n```\n\n### `Linkable`\n\n```ts\nimport { Link } from '@execonline-inc/resource';\n\ninterface Linkable<Rel extends string> {\n  links: ReadonlyArray<Link<Rel>>;\n}\n```\n\n### `PossiblyLinkable`\n\n```ts\nimport { Linkable } from '@execonline-inc/resource';\n\ninterface PossiblyLinkable<Rel extends string> {\n  whenLinks: Maybe<Linkable<Rel>>;\n}\n```\n\n### `Payloaded`\n\n```ts\ninterface Payloaded<T> {\n  payload: T;\n}\n```\n\n### `Resource`\n\n```ts\nimport { Linkable, Payloaded } from '@execonline-inc/resource';\n\ninterface Resource<T, Rel extends string> extends Payloaded<T>, Linkable<Rel> {}\n```\n\n### `ResourceWithErrors`\n\n```ts\nimport { Resource, ServerError } from '@execonline-inc/resource';\n\ninterface ResourceWithErrors<T, Rel extends string> extends Resource<T, Rel> {\n  errors: ServerError[];\n}\n```\n\n### `IdentifiablePayload`\n\n```ts\ninterface IdentifiablePayload {\n  id: number;\n}\n```\n\n### `ResourceWithMetadata`\n\n```ts\nimport { Resource } from '@execonline-inc/resource';\n\ninterface ResourceWithMetadata<T, M, Rel extends string> extends Resource<T, Rel> {\n  metadata: M;\n}\n```\n\n### `ValidationError`\n\n```ts\ninterface ValidationError {\n  kind: 'validation-error';\n  on: string;\n  param: string;\n  error: string;\n  detail: string;\n}\n```\n\n### `ValidationErrors`\n\n```ts\nimport { ValidationError } from '@execonline-inc/resource';\n\ntype ValidationErrors = ValidationError[];\n```\n\n### `PaginationMetadata`\n\n```ts\ninterface PaginationMetadata {\n  resultsCount: number;\n  pageCount: number;\n  perPage: number;\n  currentPage: number;\n}\n```\n\n## Functions\n\n### `none`\n\nCreates a `None` object.\n\n```ts\nimport { none, ResourceCollection } from '@execonline-inc/resource';\n\nconst result: ResourceCollection<unknown, 'self'> = none();\n```\n\n### `empty`\n\nCreates an `Empty` object.\n\n```ts\nimport { empty, ResourceCollection } from '@execonline-inc/resource';\n\nconst result: ResourceCollection<unknown, 'self'> = empty();\n```\n\n### `results`\n\nCreates a `Results` object.\n\n```ts\nimport { Link, results, Resource, ResourceCollection } from '@execonline-inc/resource';\n\ninterface ExamplePayload {\n  kind: 'example-payload';\n}\nconst payload = { kind: 'example-payload' };\nconst links: ReadonlyArray<Link<'self'>> = [\n  {\n    rel: 'self',\n    href: 'https://example.com/',\n    method: 'get',\n    type: 'application/json',\n  },\n];\nconst resource: Resource<ExamplePayload[], 'self'> = { payload: [payload], links };\nconst result: ResourceCollection<ExamplePayload, 'self'> = results(resource);\n```\n\n### `resources`\n\nThis function returns the appropriate `ResourceCollection` type depending on the presence of the given resource and its payload.\n\n```ts\nimport { Link, resources, Resource, ResourceCollection } from '@execonline-inc/resource';\nimport { just } from 'maybeasy';\n\ninterface ExamplePayload {\n  kind: 'example-payload';\n}\nconst payload = { kind: 'example-payload' };\nconst links: ReadonlyArray<Link<'self'>> = [\n  {\n    rel: 'self',\n    href: 'https://example.com/',\n    method: 'get',\n    type: 'application/json',\n  },\n];\nconst resource: Resource<ExamplePayload[], 'self'> = { payload: [payload], links };\nconst result: ResourceCollection<ExamplePayload, 'self'> = resources(just(resource));\n```\n\n### `linksDecoder`\n\nThis function returns a decoder for decoding HATEOAS links with valid `rel` values. It takes a function that checks for valid `rel` values.\n\n```ts\nimport { find } from '@execonline-inc/collections';\nimport { toResult } from '@execonline-inc/maybe-adapter';\nimport { Link, linksDecoder } from '@execonline-inc/resource';\nimport { Result } from 'resulty';\n\nconst validRels = ['self'] as const;\ntype Rel = typeof validRels[number];\nconst toRel = (v: string): Result<string, Rel> =>\n  toResult(\n    `Invalid rel found: ${v}`,\n    find(rel => rel === v, validRels)\n  );\nconst linksDecoder: Decoder<ReadonlyArray<Link<Rel>>> = linksDecoder<Rel>(toRel);\n```\n\n### `errorDecoder`\n\nThis decoder is for a particular error object structure.\n\n```ts\nimport { errorDecoder, ServerError } from '@execonline-inc/resource';\n\nconst obj = {\n  type: 'some type',\n  param: 'some param',\n  code: '123',\n  source: 'some source',\n  message: 'some message',\n};\nconst decoder: Decoder<ServerError> = errorDecoder;\nconst result: Result<string, ServerError> = decoder.decodeAny(obj);\n```\n\n### `resourceDecoder`\n\nThis function with a curried and non-curried form. The returned decoder is for a HATEOAS resource structure.\n\n```ts\nimport { find } from '@execonline-inc/collections';\nimport { resourceDecoder, Resource } from '@execonline-inc/resource';\nimport { toResult } from '@execonline-inc/maybe-adapter';\nimport { Result } from 'resulty';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\nconst obj = { payload: {}, links: [] };\n\nconst toRel = (v: string): Result<string, Rel> =>\n  toResult(\n    `Invalid rel found: ${v}`,\n    find(rel => rel === v, validRels)\n  );\n\nconst payloadDecoder: Decoder<ExamplePayload> = succeed({});\nconst decoder: Decoder<Resource<ExamplePayload, Rel>> = resourceDecoder<ExamplePayload, Rel>(toRel)(\n  payloadDecoder\n);\nconst result: Result<string, Resource<ExamplePayload, Rel>> = decoder.decodeAny(obj);\n```\n\n### `resourceWithMetadataDecoder`\n\nThis curried function returns a decoder for a resource with an additional `metadata` key.\n\n```ts\nimport { find } from '@execonline-inc/collections';\nimport { resourceWithMetadataDecoder, ResourceWithMetadata } from '@execonline-inc/resource';\nimport { toResult } from '@execonline-inc/maybe-adapter';\nimport Decoder, { succeed } from 'jsonous';\nimport { Result } from 'resulty';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\ninterface ExampleMetadata {}\n\nconst obj = {\n  payload: {},\n  links: [],\n  metadata: {},\n};\nconst toRel = (v: string): Result<string, Rel> =>\n  toResult(\n    `Invalid rel found: ${v}`,\n    find(rel => rel === v, validRels)\n  );\n\nconst payloadDecoder: Decoder<ExamplePayload> = succeed({});\nconst metadataDecoder: Decoder<ExampleMetadata> = succeed({});\nconst decoder: Decoder<ResourceWithMetadata<\n  ExamplePayload,\n  ExampleMetadata,\n  Rel\n>> = resourceWithMetadataDecoder<ExamplePayload, ExampleMetadata, Rel>(toRel)(\n  payloadDecoder,\n  metadataDecoder\n);\nconst result: Result<\n  string,\n  ResourceWithMetadata<ExamplePayload, ExampleMetadata, Rel>\n> = decoder.decodeAny(obj);\n```\n\n### `resourceWithErrorsDecoder`\n\nThis curried function returns a decoder for a resource with an additional `errors` key.\n\n```ts\nimport { find } from '@execonline-inc/collections';\nimport { resourceWithErrorsDecoder, ResourceWithErrors } from '@execonline-inc/resource';\nimport { toResult } from '@execonline-inc/maybe-adapter';\nimport Decoder, { succeed } from 'jsonous';\nimport { Result } from 'resulty';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\n\nconst obj = {\n  payload: {},\n  links: [],\n  errors: [],\n};\nconst toRel = (v: string): Result<string, Rel> =>\n  toResult(\n    `Invalid rel found: ${v}`,\n    find(rel => rel === v, validRels)\n  );\n\nconst payloadDecoder: Decoder<ExamplePayload> = succeed({});\nconst decoder: Decoder<ResourceWithErrors<ExamplePayload, Rel>> = resourceWithErrorsDecoder<\n  ExamplePayload,\n  Rel\n>(toRel)(payloadDecoder, metadataDecoder);\nconst result: Result<string, ResourceWithErrors<ExamplePayload, Rel>> = decoder.decodeAny(obj);\n```\n\n### `paginationMetadataDecoder`\n\nThis decoder decodes a specific pagination object structure.\n\n```ts\nimport { paginationMetadataDecoder, PaginationMetadata } from '@execonline-inc/resource';\nimport { Result } from 'resulty';\n\nconst obj = { results_count: 1, page_count: 1, per_page: 1, current_page: 1 };\nconst result: Result<string, PaginationMetadata> = paginationMetadataDecoder.decodeAny(obj);\n```\n\n### `validationErrorDecoder`\n\nThis decoder decodes a specific validation error object structure.\n\n```ts\nimport { validationErrorDecoder, ValidationError } from '@execonline-inc/resource';\nimport { Result } from 'resulty';\n\nconst obj = {\n  kind: 'validation-error',\n  on: 'that',\n  param: 'that',\n  error: 'error',\n  detail: 'detail',\n};\nconst result: Result<string, ValidationError> = validationErrorDecoder.decodeAny(obj);\n```\n\n### `validationErrorsDecoder`\n\nThis decoder is for decoding an array with `validationErrorDecoder`.\n\n### `selfUrl`\n\nThis function finds the link in a resource with a `rel` of `self`.\n\n```ts\nimport { Resource, selfUrl } from '@execonline-inc/resource';\nimport { Maybe } from 'maybeasy';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\n\nconst resource: Resource<ExamplePaylod, Rel> = {\n  payload: {},\n  links: [\n    {\n      rel: 'self',\n      href: 'https://example.com/',\n      method: 'get',\n      type: 'application/json',\n    },\n  ],\n};\nconst result: Maybe<Link<Rel>> = selfUrl<ExamplePayload, Rel>(resource);\n```\n\n### `iconUrl`\n\nThis function finds the link in a resource with a `rel` of `icon`.\n\n```ts\nimport { iconUrl, Resource } from '@execonline-inc/resource';\nimport { Maybe } from 'maybeasy';\n\ntype Rel = 'icon';\ninterface ExamplePayload {}\n\nconst resource: Resource<ExamplePaylod, Rel> = {\n  payload: {},\n  links: [\n    {\n      rel: 'icon',\n      href: 'https://example.com/',\n      method: 'get',\n      type: 'application/json',\n    },\n  ],\n};\nconst result: Maybe<Link<Rel>> = iconUrl<ExamplePayload, Rel>(resource);\n```\n\n### `isNotSelf`\n\nThis curried function determines if the given URL is not the same as the link in the resource with a rel of `self`.\n\n```ts\nimport { isNotSelf, Resource } from '@execonline-inc/resource';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\n\nconst resource: Resource<ExamplePaylod, Rel> = {\n  payload: {},\n  links: [\n    {\n      rel: 'self',\n      href: 'https://example.com/',\n      method: 'get',\n      type: 'application/json',\n    },\n  ],\n};\nconst result: boolean = isNotSelf('https://not.example.com/')(resource);\n```\n\n### `resource`\n\nThis function constructs a resource object given separated links and a payload.\n\n```ts\nimport { Link, resource, Resource } from '@execonline-inc/resource';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\n\nconst links: ReadonlyArray<Link<Rel>> = [];\nconst payload: ExamplePayload = {};\nconst result: Resource<ExamplePayload, Rel> = resource<Rel, ExamplePayload>(links, payload);\n```\n\n### `payload`\n\nThis function retrieves the payload from a given resource.\n\n```ts\nimport { payload, Resource } from '@execonline-inc/resource';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\n\nconst resource: Resource<ExamplePayload, Rel> = { payload: {}, links: [] };\nconst result: ExamplePayload = payload(resource);\n```\n\n### `links`\n\nThis function retrieves the links from a given resource.\n\n```ts\nimport { links, Link, Resource } from '@execonline-inc/resource';\n\ntype Rel = 'self';\ninterface ExamplePayload {}\n\nconst resource: Resource<ExamplePayload, Rel> = { payload: {}, links: [] };\nconst result: ReadonlyArray<Link<Rel>> = links(resource);\n```\n"}}},"__N_SSG":true}
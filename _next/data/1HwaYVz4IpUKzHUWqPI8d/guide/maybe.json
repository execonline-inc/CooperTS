{"pageProps":{"page":{"frontmatter":{"title":"Maybe Adapter","description":"Use Maybe to handle possibly-nullish values"},"slug":"maybe","markdown":{"content":"\nThe `maybe-adapter` package provides functions to convert to/from `Maybe` types.\n\n## Functions\n\n### `toResult`\n\nThis function has a curried and non-curried form. It takes an error and a `Maybe`. When the `Maybe` is a `Just`, a successful `Result` is returned with the wrapped value, otherwise an error `Result` is returned with the given error value.\n\n```ts\nimport { toResult } from '@execonline-inc/maybe-adapter';\nimport { nothing } from 'maybeasy';\n\ntoResult<string, number>('an error message')(nothing());\n```\n\n### `toTask`\n\nThis function has a curried and non-curried form. It takes an error and a `Maybe`. When the `Maybe` is a `Just`, a succeeding `Task` is returned with the wrapped value, otherwise a failing `Task` is returned with the given error value.\n\n```ts\nimport { toTask } from '@execonline-inc/maybe-adapter';\nimport { nothing } from 'maybeasy';\n\ntoTask<string, number>('an error message')(nothing());\n```\n\n### `fromBool`\n\nThis function has a curried and non-curried form. It wraps a given value in a `Maybe` depending on either the given boolean value or boolean return value of the given function.\n\n```ts\nimport { fromBool } from '@execonline-inc/maybe-adapter';\n\nfromBool(true)(123);\nfromBool((): boolean => true)(123);\n// Just<123>\n```\n"}}},"__N_SSG":true}
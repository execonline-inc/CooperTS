{"pageProps":{"packageData":{"slug":"taskarian","metadata":{"name":"taskarian","description":"A future implementation in TypeScript"},"markdown":{"content":"# taskarian\n\n[![Build Status](https://travis-ci.org/kofno/taskarian.svg?branch=master)](https://travis-ci.org/kofno/taskarian)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=plastic)](https://github.com/semantic-release/semantic-release)\n\nA Task (Future) implementation in TypeScript. Useful for managing asynchronous tasks\nthat may fail.\n\nA Task is different then a Promise because it is lazy, rather then eager. A Promise\nruns as soon as you instantiate it. A Task doesn't run until you call `fork`.\nPure functions can return tasks (just not execute them). This means that you\ncould, for example, return a task from a Redux reducer, if that's your thing.\n\n# install\n\n> npm install --save taskarian\n\n> yarn add taskarian\n\n# usage\n\n    import Task from 'taskarian';\n\n    function parse(s) {\n      return new Task(function(reject, resolve) {\n        try {\n          resolve(JSON.parse(s));\n        }\n        catch(e) {\n          reject(e.message);\n        }\n      });\n    }\n\n    parse('foo').fork(\n      function(err) { console.error(err) },\n      function(value) { console.log(value) }\n    );\n\nIt is also possible to cancel a task, if the task supports it:\n\n    import Task, { Resolve } from 'taskarian';\n\n    const cancellable = new Task((reject, resolve: Resolve<string>) => {\n      const x = setTimeout(() => resolve('Yo!'), 3000);\n      return () => clearTimeout(x);\n    });\n\n    const cancel = task.fork(\n      err => console.error(err),\n      s => console.warn(`Task should never have finished; ${s}`),\n    );\n\n    cancel();\n\n# docs\n\n[API](https://kofno.github.io/taskarian)\n"}}},"__N_SSG":true}
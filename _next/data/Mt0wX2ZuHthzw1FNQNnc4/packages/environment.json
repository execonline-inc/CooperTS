{"pageProps":{"packageData":{"slug":"environment","metadata":{"name":"@execonline-inc/environment","description":"Safely read environment cofigurations"},"markdown":{"content":"# `environment`\n\nThe `environment` package provides functions read from the execution environment.\n\n## Types\n\n### `MissingVarError`\n\nResembles the error when the environment variable doesn't exist for a read attempt.\n\n```ts\ninterface MissingVarError {\n  kind: 'missing-var-error';\n  key: string;\n}\n```\n\n### `Production`\n\nInterface representing a production environment.\n\n```ts\ninterface Production {\n  kind: 'production';\n}\n```\n\n### `Development`\n\nInterface representing a development environment.\n\n```ts\ninterface Development {\n  kind: 'development';\n}\n```\n\n### `Unknown`\n\nInterface representing an unknown environment.\n\n```ts\ninterface Unknown {\n  kind: 'unknown';\n}\n```\n\n### `Environment`\n\n```ts\ntype Environment = Production | Development | Unknown;\n```\n\n## Functions\n\n### `missingVarError`\n\nThis function takes an environment variable name and constructs a `MissingVarError` type from it.\n\n```ts\nimport { missingVarError, MissingVarError } from '@execonline-inc/environment';\n\nconst result: MissingVarError = missingVarError('SOME_ENV_VAR');\n// { kind: 'missing-var-error', key: 'SOME_ENV_VAR' }\n```\n\n### `readVarM`\n\nThis function reads for a given key from `process.env` and wraps the value in a `Maybe`. When a value exists for the key, the result is a `Just`, otherwise it is a `Nothing`.\n\n```ts\nimport { readVarM } from '@execonline-inc/environment';\nimport { Maybe } from 'maybeasy';\n\nconst result: Maybe<string> = readVarM('SOME_ENV_VAR');\n```\n\n### `readVarR`\n\nLike `readVarM`, but the condition for no value is an error `Result`.\n\n```ts\nimport { MissingVarError, readVarR } from '@execonline-inc/environment';\nimport { Result } from 'resulty';\n\nconst result: Result<MissingVarError, string> = readVarR('SOME_ENV_VAR');\n```\n\n### `readVarT`\n\nLike `readVarR`, but as a `Task` instead of a `Result`.\n\n```ts\nimport { MissingVarError, readVarT } from '@execonline-inc/environment';\nimport Task from 'taskarian';\n\nconst result: Task<MissingVarError, string> = readVarT('SOME_ENV_VAR');\n```\n\n### `environment`\n\nThis function reads the `NODE_ENV` environment variable and returns an object representing the detected environment.\n\n```ts\nimport { environment, Environment } from '@execonline-inc/environment';\n\nconst result: Environment = environment();\n```\n"}}},"__N_SSG":true}
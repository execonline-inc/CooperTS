{"pageProps":{"packageData":{"slug":"appy","metadata":{"name":"@execonline-inc/appy","description":"Call api patterns around ajaxian http tasks"},"markdown":{"content":"# `appy`\n\nThe `appy` package provides functions to interface with HATEOAS API endpoints.\n\n## Types\n\n### `MissingApplicationId`\n\n```ts\ninterface MissingApplicationId {\n  kind: 'missing-application-id';\n}\n```\n\n### `AppyError`\n\n```ts\nimport { MissingApplicationId } from '@execonline-inc/appy';\nimport { HttpError } from 'ajaxian';\n\ntype AppyError = HttpError | MissingApplicationId;\n```\n\n### `HReferenceable`\n\n```ts\nimport { HttpError, Method } from 'ajaxian';\n\ninterface HReferenceable {\n  href: string;\n  method: Method;\n}\n```\n\n## Functions\n\n### `request`\n\nThis curried function creates an HTTP request `Task` using a given authentication token, HATEOAS link, and payload data, and decodes the response using the given decoder.\n\n```ts\nimport { AppyError, HReferenceable, request } from '@execonline-inc/appy';\nimport Decoder, { succeed } from 'jsonous';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'get' };\ninterface Response {}\nconst decoder: Decoder<Response> = succeed({});\nconst payload = {};\n\nconst req: Task<AppyError, RequestBuilder<Response>> = request(token)(link, decoder, payload);\n```\n\n### `callApi`\n\nSimilar to `request`, this function creates an HTTP request `Task`. The significant differences are that a given `Task` is executed when the response indicates that the authentication is invalid, and the ultimate return value is an object of the decoded type itself, not one wrapped in a `RequestBuilder` object.\n\n```ts\nimport { AppyError, callApi, HReferenceable } from '@execonline-inc/appy';\nimport Decoder, { succeed } from 'jsonous';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'get' };\nconst whenUnauthenticated: Task<never, void> = new Task(() => noop);\ninterface Response {}\nconst decoder: Decoder<Response> = succeed({});\nconst payload = {};\n\nconst req: Task<AppyError, Response> = callApi(token)(whenUnauthenticated)(decoder, payload)(link);\n```\n\n### `postToApi`\n\nSimilar to `callApi`, this function creates an HTTP request `Task`, but it's hardcoded for the `post` verb and does not decode the response.\n\n```ts\nimport { AppyError, HReferenceable, postToApi } from '@execonline-inc/appy';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'post' };\nconst whenUnauthenticated: Task<never, void> = new Task(() => noop);\nconst payload = {};\n\nconst req: Task<AppyError, string> = postToApi(token)(whenUnauthenticated)(payload)(link);\n```\n\n### `putToApi`\n\nSimilar to `callApi`, this function creates an HTTP request `Task`, but it's hardcoded for the `put` verb and does not decode the response.\n\n```ts\nimport { AppyError, HReferenceable, putToApi } from '@execonline-inc/appy';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'put' };\nconst whenUnauthenticated: Task<never, void> = new Task(() => noop);\nconst payload = {};\n\nconst req: Task<AppyError, string> = putToApi(token)(whenUnauthenticated)(payload)(link);\n```\n\n### `deleteToApi`\n\nSimilar to `callApi`, this function creates an HTTP request `Task`, but it's hardcoded for the `delete` verb, does not decode the response, and does not accept request payload data.\n\n```ts\nimport { AppyError, deleteToApi, HReferenceable } from '@execonline-inc/appy';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'delete' };\nconst whenUnauthenticated: Task<never, void> = new Task(() => noop);\n\nconst req: Task<AppyError, string> = deleteToApi(token)(whenUnauthenticated)(link);\n```\n\n### `getFromApi`\n\nSimilar to `callApi`, this function creates an HTTP request `Task`, but it's hardcoded for the `get` verb and does not decode the response.\n\n```ts\nimport { AppyError, getFromApi, HReferenceable } from '@execonline-inc/appy';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'get' };\nconst whenUnauthenticated: Task<never, void> = new Task(() => noop);\nconst payload = {};\n\nconst req: Task<AppyError, string> = getFromApi(token)(whenUnauthenticated)(payload)(link);\n```\n\n### `getRespFromApi`\n\nSimilar to `callApi`, this function creates an HTTP request `Task`, but it's hardcoded for the `get` verb, does not decode the response, and returns the entire successful response object rather than just its body.\n\n```ts\nimport { AppyError, getRespFromApi, HReferenceable } from '@execonline-inc/appy';\nimport { Maybe, just } from 'maybeasy';\nimport Task from 'taskarian';\n\nconst token: Maybe<string> = just('3ad1afde-6d9f-4e29-97d4-4396f891267f');\nconst link: HReferenceable = { href: 'https://example.com/', method: 'get' };\nconst whenUnauthenticated: Task<never, void> = new Task(() => noop);\nconst payload = {};\n\nconst req: Task<AppyError, HttpSuccess<string>> = getRespFromApi(token)(whenUnauthenticated)(\n  payload\n)(link);\n```\n"}}},"__N_SSG":true}
{"pageProps":{"page":{"slug":"map-vs-andthen","frontmatter":{"title":"When To Use Which - map vs. andThen","description":""},"markdown":{"content":"\nmap and andThen are very similar operations and so developers new to functors and monads are often confused about when to apply which operations. The easiest way to make that decision is to allow the types to guide you. But if you are also new to type systems, this is not very helpful advice. So let‚Äôs walk through an example following the types.\n\n## The Types\n\nFor our contrived example, we‚Äôll assume we are working with a simple library for converting dates to strings and strings to date. This library consists of two functions. Their type signatures are presented here:\n\n```typescript\nconst dateToString = (date: Date) => string;\n\nconst stringToDate = (candidate: string) => Maybe<Date>;\n```\n\nEven without the implementations, these type signatures convey a lot of information. The `dateToString` function maps a Date type to a string type, and every Date can be converted to a string. The `stringToDate` function maps a string to a Date, but since it returns `Maybe<Date>` we know that not every string produces a valid date.\n\n## Map\n\nGiven that we have a type of `Maybe<Date>`, then we will have functor and monad interfaces with the following type signatures:\n\n```typescript\n.map<S>(fn:  (value:  Date)  =>  S):  Maybe<S>\n\n.andThen<S>(fn:  (value:  Date)  =>  Maybe<S>):  Maybe<S>\n```\n\nIf we are hoping to convert the Date to a string, then we must use `dateToString`. In this scenario, one of these interfaces will never work. Using `dateToString` with `andThen` will not even compile. So our only option here is to use `map`.\n\nUsing `dateToString` converts our functor type signature to this:\n\n```typescript\n.map<string>(dateToString): Maybe<string>\n```\n\nI‚Äôm being explicit here, but typescript will infer the return type from the function being passed. So in practice, this can usually just be written as:\n\n```typescript\n.map(dateToString)\n```\n\nThis is what makes functors extremely powerful. We can now use this simple function in any context that is represented by a functor (ie. implements `map`). Result, Task, Decoder, NonEmptyList, Array; this function will work unchanged in any of them.\n\n## AndThen\n\nGiven a type of `Maybe<string>`, then we will have functor and monad interfaces with the following type signatures:\n\n```typescript\n.map<S>(fn:  (value:  string)  =>  S):  Maybe<S>\n\n.andThen<S>(fn:  (value:  string)  =>  Maybe<S>):  Maybe<S>\n```\n\nIf we need to convert the string to a Date, then we will need to use our `stringToDate` function. We can use `.map` in this case too, but it may not be what we want. Let‚Äôs look at the type signature and see why that might be.\n\n```typescript\n.map<Maybe<Date>>(stringToDate):  Maybe<Maybe<Date>>\n```\n\nThis will compile, but you can see that we have a Maybe type nested within another Maybe. This nesting of a monad within the same type of monad is a red flag for maintainability and clarity. Let‚Äôs see what happens when we use the monad interface:\n\n```typescript\n.andThen<Date>(stringToDate):  Maybe<Date>\n```\n\nThis is much easier to maintain. We lose the nesting when we use the monad interface.\n\nThe downside to the monad interface is that our `stringToDate` function is specific to Maybe. This requires us to write new versions of the function to work with other monads. However, it is easy enough to convert a Maybe type to other monads as appropriate. In fact, `toResult` and `toTask` helpers already exist for converting between these types.\n\n## Summary\n\nHopefully, this helps to clarify when it is best to use `map` vs. `andThen`.\n"}},"navTree":[{"title":"About","href":"/about","links":[]},{"title":"Guide","href":"/guide","links":[{"title":"CooperTS - Practical Patterns","href":"/guide/practical-patterns"}]},{"title":"Examples","href":"/examples","links":[{"title":"Task Manager App","href":"/examples#task-manager-app"},{"title":"Cellular Automata Emulator","href":"/examples#cellular-automata-emulator"},{"title":"This Doc Site üòÅ","href":"/examples#this-doc-site"}]},{"title":"Frequently Asked Questions","href":"/faq","links":[{"title":"What's All This About Map Then?","href":"/faq/about-map"},{"title":"Avoiding The Billion Dollar Mistake","href":"/faq/billion-dollar-mistake"},{"title":"When to Use Which - getOrElse vs getOrElseValue","href":"/faq/getorelse-vs-getorelsevalue"},{"title":"Imperative vs Declarative Programming","href":"/faq/imperative-vs-declarative"},{"title":"When To Use Which - map vs. andThen","href":"/faq/map-vs-andthen"},{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","href":"/faq/monads"}]},{"title":"Packages","href":"/packages","links":[{"title":"ajaxian","href":"/packages/ajaxian"},{"title":"ajaxios","href":"/packages/ajaxios"},{"title":"@kofno/cute","href":"/packages/cute"},{"title":"@kofno/gaia","href":"/packages/gaia"},{"title":"jsonous","href":"/packages/jsonous"},{"title":"maybeasy","href":"/packages/maybeasy"},{"title":"nonempty-list","href":"/packages/nonempty-list"},{"title":"@kofno/piper","href":"/packages/piper"},{"title":"resulty","href":"/packages/resulty"},{"title":"@kofno/stack-ts","href":"/packages/stack-ts"},{"title":"taskarian","href":"/packages/taskarian"},{"title":"@execonline-inc/appy","href":"/packages/appy"},{"title":"@execonline-inc/collections","href":"/packages/collections"},{"title":"@execonline-inc/decoders","href":"/packages/decoders"},{"title":"@execonline-inc/dom","href":"/packages/dom"},{"title":"@execonline-inc/environment","href":"/packages/environment"},{"title":"@execonline-inc/error-handling","href":"/packages/error-handling"},{"title":"@execonline-inc/logging","href":"/packages/logging"},{"title":"@execonline-inc/maybe-adapter","href":"/packages/maybe-adapter"},{"title":"@execonline-inc/numbers","href":"/packages/numbers"},{"title":"@execonline-inc/resource","href":"/packages/resource"},{"title":"@execonline-inc/strings","href":"/packages/strings"},{"title":"@execonline-inc/time","href":"/packages/time"},{"title":"@execonline-inc/time-distance","href":"/packages/time-distance"},{"title":"@execonline-inc/translations","href":"/packages/translations"},{"title":"@execonline-inc/url","href":"/packages/url"},{"title":"@execonline-inc/web-url","href":"/packages/web-url"}]}]},"__N_SSG":true}
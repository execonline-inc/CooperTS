{"pageProps":{"packageData":{"slug":"collections","metadata":{"name":"@execonline-inc/collections","description":"Utilities for working with collections of data"},"markdown":{"content":"# `collections`\n\nThe `collections` package provides functions to work with lists in various ways.\n\n## Functions\n\n### `bifurcateWhen`\n\nThis function splits an array once the provided function evaluates to `true` for an element of that array. The element that resulted in the `true` evaluation is the first element of the second returned array.\n\n```ts\nimport { bifurcateWhen } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result = bifurcateWhen((item: number): boolean => item === 3, list);\n// [[1, 2], [3, 4, 5]]\n```\n\n### `bifurcateBy`\n\nThis function splits an array by the evaluation of the provided function. Array elements that evaluate to `true` are returned as the first bifurcated array, those that evaluate to `false` are returned as the second bifurcated array.\n\n```ts\nimport { bifurcateBy } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst isEven = (item: number): boolean => !(item % 2);\nconst result = bifurcateBy(isEven, list);\n// [[2, 4], [1, 3, 5]]\n```\n\n### `concat`\n\nThis curried function simply concatenates two arrays.\n\n```ts\nimport { concat } from '@execonline-inc/collections';\n\nconst listA = [1, 2, 3];\nconst listB = [4, 5, 6];\n\nconst result = concat(listA)(listB);\n// [1, 2, 3, 4, 5, 6]\n```\n\n### `concatAll`\n\nThis function takes an array of arrays, and concatenates them all in order.\n\n```ts\nimport { concatAll } from '@execonline-inc/collections';\n\nconst lists = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconst result: number[] = concatAll(lists);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### `drop`\n\n`drop` creates a new array by dropping the specified number of items from the front of the array.\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { drop } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result = drop(3)(list);\n// [ 4, 5 ]\n```\n\n### `dropUntil`\n\nThis function has a curried and non-curried form. It takes an evaluation function and an array.\n\nThe evaluation function is called on elements of the array until it evaluates to `true`. The element that caused the function to evaluate to `true` and subsequent elements of the array are returned in a new array.\n\n```ts\nimport { dropUntil } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result: number[] = dropUntil((item: number): boolean => item === 3)(list);\n// [3, 4, 5]\n```\n\n### `uniqBy`\n\nThis curried function takes a transformation function and an array. Each element of the array is passed to the transformation function. Duplicate evaluations of this function exlude the corresponding original element from the returned array.\n\n```ts\nimport { uniqBy } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result: number[] = uniqBy((item: number): string => (item > 3 ? String(item) : ''));\n// [1, 4, 5]\n```\n\n### `uniq`\n\nThis function returns only the unique elements of a given array.\n\n```ts\nimport { uniq } from '@execonline-inc/collections';\n\nconst list = [1, 1, 2, 3, 3];\nconst result: number[] = uniq(list);\n// [1, 2, 3]\n```\n\n### `find`\n\n`find` returns the first matching element in an Array.\n\nMatching is determined by the function passed as the first argument.\nIf it returns true, then a match has been identified.\n\nIf a match is found, the item is return wrapped in a `Just`.\nOtherwise, a `Nothing` is returned.\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { find } from '@execonline-inc/collections';\nimport { Maybe } from 'maybeasy';\n\nconst list = [1, 2, 3];\nconst result: Maybe<number> = find((item: number): boolean => item === 2)(list);\n// Just<2>\n```\n\n### `findIndex`\n\n`findIndex` takes an evaluation function and an array.\n\nThe evaluation function is called on elements of the array until it evaluates to `true`, at which point that element's index is returned as a `Just`. If no element is found, a `Nothing` iss returned.\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { findIndex } from '@execonline-inc/collections';\nimport { Maybe } from 'maybeasy';\n\nconst list = [1, 2, 3];\nconst result: Maybe<number> = findIndex((item: number): boolean => item === 2)(list);\n// Just<1>\n```\n\n### `findR`\n\nThis curried function operates like `find<T>`, but returns a `Result<NothingFound, T>` instead of a `Maybe<T>`.\n\n```ts\nimport { findR, NothingFound } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3];\nconst result: Result<NothingFound, number> = findR((item: number): boolean => item === 4)(list);\n// Err<NothingFound>\n```\n\n### `findItem`\n\nThis curried function finds the first item of the given ID in an array of objects of the interface `{ id: number }`.\n\n```ts\nimport { findItem } from '@execonline-inc/collections';\nimport { Maybe } from 'maybeasy';\n\nconst list = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst result: Maybe<{ id: number }> = findItem(2)(list);\n// Just<{ id: 2 }>\n```\n\n### `findItemT`\n\nThis curried function wraps `findItem` functionality in a `Task`. It is particularly useful in chaining of tasks:\n\n```ts\nimport { findItemT, ItemNotFound } from '@execonline-inc/collections';\nimport Task from 'taskarian';\n\nconst list = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst task = Task.succeed<ItemNotFound, { id: number }[]>(list);\n\nconst example: Task<ItemNotFound, { id: 2 }> = task.andThen(findItemT(2));\n```\n\n### `findPayload`\n\n`findPayload` accepts an ID and a list of payloads of a `{ payload: { id: number } }` interface and returns the first payload with the matching ID as a `Maybe`.\n\nThis function has a curried and non-curried form\n\n```ts\nimport { findPayload } from '@execonline-inc/collections';\nimport { Maybe } from 'maybeasy';\n\nconst payloads = [{ payload: { id: 1 } }, { payload: { id: 2 } }, { payload: { id: 3 } }];\nconst result: Maybe<{ payload: { id: number } }> = findPayload(2)(payloads);\n// Just<{ payload: { id: 2 } }>\n```\n\n### `findPayloadT`\n\nSame as `findItemT` but with the functionality of `findPayload`.\n\n```ts\nimport { findPayloadT, PayloadNotFound } from '@execonline-inc/collections';\nimport Task from 'taskarian';\n\nconst payloads = [{ payload: { id: 1 } }, { payload: { id: 2 } }, { payload: { id: 3 } }];\nconst task = Task.succeed<PayloadNotFound, { payload: { id: number } }[]>(payloads);\n\nconst example: Task<PayloadNotFound, { payload: { id: 2 } }> = task.andThen(findPayloadT(2));\n```\n\n### `findPayloadByUuid`\n\nSame as `findPayload` but takes a `string` as the UUID to find and a list of payloads of a `{ payload: { uuid: string } }` interface.\n\n```ts\nimport { findPayloadByUuid } from '@execonline-inc/collections';\nimport { Maybe } from 'maybeasy';\n\nconst payloads = [\n  { payload: { uuid: 'cb08aa12-30f3-48b4-a6ec-bb95ca1e021d' } },\n  { payload: { uuid: 'e1da03ff-46ff-49c9-bb69-a09ea68fbd76' } },\n  { payload: { uuid: 'ea4c9aa3-b39b-4c3c-a931-b1bbc921970c' } },\n];\nconst result: Maybe<{ payload: { id: number } }> = findPayloadByUuid(\n  'cb08aa12-30f3-48b4-a6ec-bb95ca1e021d'\n)(payloads);\n// Just<{ payload: { uuid: 'cb08aa12-30f3-48b4-a6ec-bb95ca1e021d' } }>\n```\n\n### `groupBy`\n\nThis curried function takes a function to derive the group key for each element and an array of items.\n\n```ts\nimport { groupBy } from '@execonline-inc/collections';\n\nconst list = ['abc-123', 'abc-456', 'def-789'];\nconst result = groupBy((item: string): string => item.split('-').shift())(list);\n// { 'abc': ['abc-123', 'abc-456'], 'def': ['def-789'] }\n```\n\n### `toPairs`\n\nThis function takes an object and returns an array of key-value pairs.\n\n```ts\nimport { toPairs } from '@execonline-inc/collections';\n\nconst obj = {\n  abc: 123,\n  def: 456,\n};\nconst result = toPairs(obj);\n// [['abc', 123], ['def', 456]]\n```\n\n### `map`\n\nThis curried function takes a transformation function and a list of items to return a new list of items.\n\n```ts\nimport { map } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3];\nconst result: number[] = map((item: number): number => item + 10)(list);\n// [11, 12, 13]\n```\n\n### `flatMap`\n\n`flatMap` takes a list of items and a transformation function that returns an array for each item. The final return value is a flattened array of each of those resulting arrays.\n\nThis function has curried and non-curried form.\n\n```ts\nimport { flatMap } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3];\nconst result = flatMap((item: number): number[] => [10, 100, 1000].map(n => n * item))(list);\n// [10, 100, 1000, 20, 200, 2000, 30, 300, 3000]\n```\n\n### `mapMaybe`\n\n`mapMaybe` takes a list of items and a function that maps each item of the array to a `Maybe`. The final return value is an array of only the mapped values that were a `Just`.\n\nThis function has curried and non-curried form.\n\n```ts\nimport { mapMaybe } from '@execonline-inc/collections';\nimport { Maybe } from 'maybeasy';\n\nconst list = [1, 2, 3, 4, 5, 6];\nconst result = mapMaybe(\n  (item: number): Maybe<number> => item % 2 ? nothing() : just(item);\n)(list);\n// [2, 4, 6]\n```\n\n### `byId`\n\nThis curried function checks whether the given ID matches the ID in the given payload.\n\n```ts\nimport { byId } from '@execonline-inc/collections';\n\nconst payload = { id: 123 };\nconst result: boolean = byId(123)(payload);\n```\n\n### `byPayloadId`\n\nThis curried function checks whether the given ID matches the ID in the given resource.\n\n```ts\nimport { byPayloadId } from '@execonline-inc/collections';\n\nconst resource = { payload: { id: 123 } };\nconst result: boolean = byPayloadId(123)(resource);\n```\n\n### `byPayloadUuid`\n\nThis curried function checks whether the given UUID matches the UUID in the given resource.\n\n```ts\nimport { byPayloadUuid } from '@execonline-inc/collections';\n\nconst resource = { payload: { id: '9f925583-7a8f-4459-979d-5ad2d5ede2f8' } };\nconst result: boolean = byPayloadUuid('9f925583-7a8f-4459-979d-5ad2d5ede2f8')(resource);\n```\n\n### `sort`\n\n`sort` provides stable sorting of an array using a given comparison function.\n\nThe comparison function should return:\n\n- `< 0` to sort `a` before `b`\n- `0` to consider `a` equal to `b`\n- `> 0` to sort `a` after `b`\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { sort } from '@execonline-inc/collections';\n\nconst list = [\n  { age: 30, name: 'Ava' },\n  { age: 25, name: 'Bob' },\n  { age: 20, name: 'Cas' },\n  { age: 25, name: 'Dan' },\n];\nconst result = sort((a, b) => a.age - b.age)(list);\n// [{ age: 20, name: 'Cas' }, { age: 25, nam: 'Bob' }, { age: 25, name: 'Dan' }, { age: 30, name: 'Ava' }]\n```\n\n### `take`\n\n`take` creates a new array of the specified amount of items from the given array from its beginning.\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { take } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result = take(3)(list);\n// [1, 2, 3]\n```\n\n### `first`\n\nThis function returns the first item from an array. When present, the item is wrapped in a `Just`, otherwise the return value is a `Nothing`.\n\n```ts\nimport { first } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3];\nconst result = first(list);\n// Just<1>\n```\n\n### `last`\n\nThis function returns the last item from an array. When present, the item is wrapped in a `Just`, otherwise the return value is a `Nothing`.\n\n```ts\nimport { last } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3];\nconst result = last(list);\n// Just<3>\n```\n\n### `takeLastUntil`\n\n`takeLastUntil` returns a new array of the items from the end of the given array until the given function evalutes `true`.\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { takeLastUntil } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result = takeLastUntil((item: number): boolean => item === 3)(list);\n// [4, 5]\n```\n\n### `takeLastWhile`\n\n`takeLastWhile` returns a new array of the items from the end of the given array while the given function evaluates `true`.\n\nThis function has a curried and non-curried form.\n\n```ts\nimport { takeLastWhile } from '@execonline-inc/collections';\n\nconst list = [1, 2, 3, 4, 5];\nconst result = takeLastWhile((item: number): boolean => item > 3)(list);\n// [4, 5]\n```\n"}},"navTree":[{"title":"About","href":"/about","links":[]},{"title":"Guide","href":"/guide","links":[{"title":"Maybe Adapter","href":"/guide/maybe"},{"title":"CooperTS - Practical Patterns","href":"/guide/practical-patterns"},{"title":"Translations Package","href":"/guide/translations"}]},{"title":"Examples","href":"/examples","links":[{"title":"Task Manager App","href":"/examples#task-manager-app"},{"title":"Cellular Automata Emulator","href":"/examples#cellular-automata-emulator"},{"title":"This Doc Site 😁","href":"/examples#this-doc-site"}]},{"title":"Frequently Asked Questions","href":"/faq","links":[{"title":"What's All This About Map Then?","href":"/faq/about-map"},{"title":"Avoiding The Billion Dollar Mistake","href":"/faq/billion-dollar-mistake"},{"title":"When to Use Which - getOrElse vs getOrElseValue","href":"/faq/getorelse-vs-getorelsevalue"},{"title":"Imperative vs Declarative Programming","href":"/faq/imperative-vs-declarative"},{"title":"When To Use Which - map vs. andThen","href":"/faq/map-vs-andthen"},{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","href":"/faq/monads"}]},{"title":"Packages","href":"/packages","links":[{"title":"ajaxian","href":"/packages/ajaxian"},{"title":"ajaxios","href":"/packages/ajaxios"},{"title":"@kofno/cute","href":"/packages/cute"},{"title":"@kofno/gaia","href":"/packages/gaia"},{"title":"jsonous","href":"/packages/jsonous"},{"title":"maybeasy","href":"/packages/maybeasy"},{"title":"nonempty-list","href":"/packages/nonempty-list"},{"title":"@kofno/piper","href":"/packages/piper"},{"title":"resulty","href":"/packages/resulty"},{"title":"@kofno/stack-ts","href":"/packages/stack-ts"},{"title":"taskarian","href":"/packages/taskarian"},{"title":"@execonline-inc/appy","href":"/packages/appy"},{"title":"@execonline-inc/collections","href":"/packages/collections"},{"title":"@execonline-inc/decoders","href":"/packages/decoders"},{"title":"@execonline-inc/dom","href":"/packages/dom"},{"title":"@execonline-inc/environment","href":"/packages/environment"},{"title":"@execonline-inc/error-handling","href":"/packages/error-handling"},{"title":"@execonline-inc/logging","href":"/packages/logging"},{"title":"@execonline-inc/maybe-adapter","href":"/packages/maybe-adapter"},{"title":"@execonline-inc/numbers","href":"/packages/numbers"},{"title":"@execonline-inc/resource","href":"/packages/resource"},{"title":"@execonline-inc/strings","href":"/packages/strings"},{"title":"@execonline-inc/time","href":"/packages/time"},{"title":"@execonline-inc/time-distance","href":"/packages/time-distance"},{"title":"@execonline-inc/translations","href":"/packages/translations"},{"title":"@execonline-inc/url","href":"/packages/url"}]}]},"__N_SSG":true}
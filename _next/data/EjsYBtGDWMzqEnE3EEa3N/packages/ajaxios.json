{"pageProps":{"packageData":{"slug":"ajaxios","metadata":{"name":"ajaxios","description":"Http requests with better error handling"},"markdown":{"content":"# ajaxios\n\n[![Build Status](https://travis-ci.org/kofno/ajaxios.svg?branch=master)](https://travis-ci.org/kofno/ajaxios)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n\nAjaxios is a fork of Ajaxian. The key differenence is that, where Ajaxian wraps\nXMLHttpRequest and only works in browsers, Ajaxios wraps the Axios library so\nthat it can work in browsers or Node. This means that the Ajaxios is suitable\nfor use in server side rendering or in a Node server or Lambda.\n\n[More about the Axios library](https://www.npmjs.com/package/axios).\n\nAjaxios is NOT a drop-in replacement for Ajaxian. They are very similar APIs,\nbut some concessions have been made to how Axios works differently then the\nXMLHttpRequest.\n\nAjaxios borrows heavily from the Elm Http module. In many ways it's not all\nthat different from other http libraries: build a request, send it to the\nserver, and then handle the response. The emphasis here is on handling error\nresponses correctly and consistently, without resorting to thrown exceptions.\n\n## tasks\n\nInstead of Promises, Ajaxios uses Futures (here called Tasks, from the\nTaskarian library). Tasks are lazy and will not execute until forked. This\nmeans a Task can be returned from a pure function. Tasks are also composeable.\nYou can build a complex chain of behaviors, while strictly controlling exactly\nwhen the side effects happen. In this way I prefer them over Promises, which\nare stateful and initiate side effects as soon as they are instantiated.\n\n## errors\n\nAjaxios does not throw errors for failed requests. Instead, failed requests\nare returned as one of several different types of errors. Error conditions\nare documented this way because I believe that you create a better user\nexperience when you handle error conditions gracefully. I want to provide\nthe tools for doing that.\n\nAll of the error types are documented in the HttpError module.\n\n## decoders\n\nDecoders are another idea stolen from Elm. A decoder is a monad that converts\nthe response body of a request into a data structure that can be used by the\napplication.\n\nAjaxios uses Jsonous (as a peer dependency) to describe decoders.\n\nIf the data passes muster, then the decoder returns the data wrapped in\nan Ok object. If the data is incorrect, then an error message will be\nwrapped in an Err object and Ajaxios will return the result as a BadPayload\nerror.\n\n# installing\n\n> npm install --save ajaxios\n\n> yarn add ajaxios\n\n# usage\n\n    import { toHttpTask, Request, header } from 'ajaxios';\n    import { succeed } from 'jsonous';\n\n    // Create a request object. This is a TS example.\n    const request: Request<{}> = {\n      url: '/some_end_point',\n      method: 'post',\n      data: { foo: 'bar' },\n      timeout: 0,\n      headers: [header('X-Some-Header', 'baz')],\n      withCredentials: true,\n      decoder: succeed({}),\n    };\n\n    toHttpTask(request).fork(\n      err => console.error(err),\n      data => console.log(\"Success!\", data)\n    );\n\nThere are some convenience builders for making requests, too:\n\n    import { post } from 'ajaxios';\n\n    const request = post('/some_end_point', { foo: bar }, succeed({}))\n      .withHeader(header('X-Some-Header', 'baz'));\n\nIt is also possible to abort an HTTP request before it completes. Forking the\nHTTP task returns an abort function from the underlying HTTP request object:\n\n    const cancel = toHttpTask(request).fork(\n      err => console.error(err),\n      data => console.log(\"Success!\", data),\n    );\n\n    cancel() // <-- aborts request\n"}},"navTree":[{"title":"About","href":"/about","links":[]},{"title":"Guide","href":"/guide","links":[{"title":"CooperTS - Practical Patterns","href":"/guide/practical-patterns"}]},{"title":"Examples","href":"/examples","links":[{"title":"Task Manager App","href":"/examples#task-manager-app"},{"title":"Cellular Automata Emulator","href":"/examples#cellular-automata-emulator"},{"title":"This Doc Site 😁","href":"/examples#this-doc-site"}]},{"title":"Frequently Asked Questions","href":"/faq","links":[{"title":"What's All This About Map Then?","href":"/faq/about-map"},{"title":"Avoiding The Billion Dollar Mistake","href":"/faq/billion-dollar-mistake"},{"title":"When to Use Which - getOrElse vs getOrElseValue","href":"/faq/getorelse-vs-getorelsevalue"},{"title":"Imperative vs Declarative Programming","href":"/faq/imperative-vs-declarative"},{"title":"When To Use Which - map vs. andThen","href":"/faq/map-vs-andthen"},{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","href":"/faq/monads"}]},{"title":"Packages","href":"/packages","links":[{"title":"ajaxian","href":"/packages/ajaxian"},{"title":"ajaxios","href":"/packages/ajaxios"},{"title":"@kofno/cute","href":"/packages/cute"},{"title":"@kofno/gaia","href":"/packages/gaia"},{"title":"jsonous","href":"/packages/jsonous"},{"title":"maybeasy","href":"/packages/maybeasy"},{"title":"nonempty-list","href":"/packages/nonempty-list"},{"title":"@kofno/piper","href":"/packages/piper"},{"title":"resulty","href":"/packages/resulty"},{"title":"@kofno/stack-ts","href":"/packages/stack-ts"},{"title":"taskarian","href":"/packages/taskarian"},{"title":"@execonline-inc/appy","href":"/packages/appy"},{"title":"@execonline-inc/collections","href":"/packages/collections"},{"title":"@execonline-inc/decoders","href":"/packages/decoders"},{"title":"@execonline-inc/dom","href":"/packages/dom"},{"title":"@execonline-inc/environment","href":"/packages/environment"},{"title":"@execonline-inc/error-handling","href":"/packages/error-handling"},{"title":"@execonline-inc/logging","href":"/packages/logging"},{"title":"@execonline-inc/maybe-adapter","href":"/packages/maybe-adapter"},{"title":"@execonline-inc/numbers","href":"/packages/numbers"},{"title":"@execonline-inc/resource","href":"/packages/resource"},{"title":"@execonline-inc/strings","href":"/packages/strings"},{"title":"@execonline-inc/time","href":"/packages/time"},{"title":"@execonline-inc/time-distance","href":"/packages/time-distance"},{"title":"@execonline-inc/translations","href":"/packages/translations"},{"title":"@execonline-inc/url","href":"/packages/url"}]}]},"__N_SSG":true}
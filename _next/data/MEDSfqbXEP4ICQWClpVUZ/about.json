{"pageProps":{"markdown":{"content":"# About\n\nCooperTS is a collection of [Elm]-inspired functional-programming tools in Typescript. CooperTS is\nfocused on eliminating runtime exceptions and reducing testing burden.\n\n## Why CooperTS?\n\nCooperTS lets the Typescript compiler do as much of the work as possible.\n\n### Avoid `null` Errors\n\nCooperTS provides [`Maybe<T>`] to represent values that are nullable.\n\nExample:\n\n```ts\nfunction find<T>(fn: (t: T) => boolean, ts: ReadonlyArray<T>): Maybe<T> {\n  for (const t of ts) {\n    if (fn(t)) {\n      return just(t);\n    }\n  }\n  return nothing<T>();\n}\n```\n\n### Handle Errors Without Raising Exceptions\n\nCooperTS provides [`Result<E, T>`] to represent the result of a computation that can fail.\n\nExample:\n\n```ts\nimport { ok, err } from 'resulty';\n\nexport const decodeBase64: Result<string, string> = (value: string) => {\n  try {\n    const decodedStr = Base64.decode(value);\n    return ok(decodedStr);\n  } catch {\n    return err(`Expected a base64 encoded string but got ${value}`);\n  }\n};\n```\n\n### Verify Types at the App's Edges\n\nCooperTS provides [`Decoder<T>`] for verifying the type of unknown objects or JSON and converting it\ninto a shape the app can use. Rather than type-checking external data as it is used, Decoders verify\ndata right when it is received.\n\nInstead of:\n\n```ts\nexport const helloUser = (data: string) => {\n  const value: unknown = JSON.parse(data);\n  if (\n    value &&\n    typeof value === 'object' &&\n    'user' in value &&\n    value.user &&\n    typeof value.user === 'object' &&\n    'name' in value.user &&\n    typeof value.user.name === 'string'\n  ) {\n    console.log(`Hello ${value.user.name}`);\n  }\n};\n```\n\nDecoders let us write:\n\n```ts\nimport { field, string } from 'jsonous';\n\nexport const helloUserWithDecoder = (data: string) => {\n  field('user', field('name', string))\n    .decodeJson(data)\n    .map((name) => `Hello ${name}`)\n    .do(console.log);\n};\n```\n\n### Prefer [Pure Functions] by Isolating Side-Effects\n\nCooperTS provides [`Task<E, T>`] for wrapping side-effects. This is similar to JavaScript's\n`Promise`, except that Tasks do not run until they are forked, so a function can create a Task\nwithout causing any side-effects.\n\nThis allows us to create and run a Task in two separate places, which gives us the ability to build\nlarge chains of tasks from smaller tasks.\n\nFor example, this method creates a Task that is in charge of sending a Slack message, but no Slack\nmessage is sent until the Task is forked.\n\n```ts\nexport const sendMessage = (event: Event) =>\n  Task.succeed<ActionFailed, {}>({})\n    .assign('zenQuote', getZenQuote)\n    .assign('slackChannel', slackChannel)\n    .assign('slackWebhookUrl', slackWebhookUrl)\n    .andThen(postQuoteToSlack(event));\n```\n\n### Prefer Functional Programming Over Nesting Logic\n\n[`Maybe<T>`], [`Result<E, T>`], [`Decoder<T>`], and [`Task<E, T>`] all have similar methods, and can\nbe used to avoid complex if/else scenarios.\n\nFor example, we can use the `find` method from the [section above on avoiding `null` errors] to\nsimplify this code:\n\n```ts\nconst users: Array<{ id: number; parentId: number; name: string }> = getUsers();\nconst user = users.find(({ id }) => id === 123);\n\nif (user) {\n  const parent = users.find(({ id }) => id === user.parentId);\n  if (parent) {\n    console.log(`Found parent of user #123: ${parent.name}!`);\n  }\n}\n```\n\nInto this:\n\n```ts\nconst users: Array<{ id: number; parentId: number }> = findUsers();\n\nfind(({ id }) => id === 123, users)\n  .andThen(({ parentId }) => find(({ id }) => id === parentId, users))\n  .map(({ name }) => `Found parent of user #123: ${name}!`)\n  .do(console.log);\n```\n\n[Elm]: https://elm-lang.org/\n[`Maybe<T>`]: /packages/maybeasy\n[`Result<E, T>`]: /packages/resulty\n[Pure Functions]: https://en.wikipedia.org/wiki/Pure_function\n[`Task<E, T>`]: /packages/taskarian\n[`Decoder<T>`]: /packages/jsonous\n[section above on avoiding `null` errors]: #avoid-null-errors\n"},"navTree":[{"title":"About","href":"/about","links":[]},{"title":"Guide","href":"/guide","links":[{"title":"CooperTS - Practical Patterns","href":"/guide/practical-patterns"}]},{"title":"Examples","href":"/examples","links":[{"title":"Task Manager App","href":"/examples#task-manager-app"},{"title":"Cellular Automata Emulator","href":"/examples#cellular-automata-emulator"},{"title":"This Doc Site üòÅ","href":"/examples#this-doc-site"}]},{"title":"Frequently Asked Questions","href":"/faq","links":[{"title":"What's All This About Map Then?","href":"/faq/about-map"},{"title":"Avoiding The Billion Dollar Mistake","href":"/faq/billion-dollar-mistake"},{"title":"When to Use Which - getOrElse vs getOrElseValue","href":"/faq/getorelse-vs-getorelsevalue"},{"title":"Imperative vs Declarative Programming","href":"/faq/imperative-vs-declarative"},{"title":"When To Use Which - map vs. andThen","href":"/faq/map-vs-andthen"},{"title":"When To Use Which - Maybe vs Result vs Task (and other Monads)","href":"/faq/monads"}]},{"title":"Packages","href":"/packages","links":[{"title":"ajaxian","href":"/packages/ajaxian"},{"title":"ajaxios","href":"/packages/ajaxios"},{"title":"@kofno/cute","href":"/packages/cute"},{"title":"@kofno/gaia","href":"/packages/gaia"},{"title":"jsonous","href":"/packages/jsonous"},{"title":"maybeasy","href":"/packages/maybeasy"},{"title":"nonempty-list","href":"/packages/nonempty-list"},{"title":"@kofno/piper","href":"/packages/piper"},{"title":"resulty","href":"/packages/resulty"},{"title":"@kofno/stack-ts","href":"/packages/stack-ts"},{"title":"taskarian","href":"/packages/taskarian"},{"title":"@execonline-inc/appy","href":"/packages/appy"},{"title":"@execonline-inc/collections","href":"/packages/collections"},{"title":"@execonline-inc/decoders","href":"/packages/decoders"},{"title":"@execonline-inc/dom","href":"/packages/dom"},{"title":"@execonline-inc/environment","href":"/packages/environment"},{"title":"@execonline-inc/error-handling","href":"/packages/error-handling"},{"title":"@execonline-inc/logging","href":"/packages/logging"},{"title":"@execonline-inc/maybe-adapter","href":"/packages/maybe-adapter"},{"title":"@execonline-inc/numbers","href":"/packages/numbers"},{"title":"@execonline-inc/resource","href":"/packages/resource"},{"title":"@execonline-inc/strings","href":"/packages/strings"},{"title":"@execonline-inc/time","href":"/packages/time"},{"title":"@execonline-inc/time-distance","href":"/packages/time-distance"},{"title":"@execonline-inc/translations","href":"/packages/translations"},{"title":"@execonline-inc/url","href":"/packages/url"},{"title":"@execonline-inc/web-url","href":"/packages/web-url"}]}]},"__N_SSG":true}
import{logWithTimestamp as x}from"@execonline-inc/logging";import{Task as W}from"taskarian";import{readVarT as a}from"@execonline-inc/environment";var i=()=>a("GITHUB_CONTEXT"),n=()=>a("SLACK_CHANNEL"),c=()=>a("SLACK_WEBHOOK_URL");import{asTask as q}from"@execonline-inc/error-handling";import{stringLiteral as h}from"@execonline-inc/decoders";import{field as t,string as r,succeed as o}from"jsonous";var l=o({}).assign("joke",t("joke",r)),E=o({}).assign("login",t("login",r)).assign("htmlUrl",t("html_url",r)).assign("avatarUrl",t("avatar_url",r)),v=o({}).assign("href",t("href",r)),S=o({}).assign("self",t("self",v)),U=o({}).assign("links",t("_links",S)).assign("htmlUrl",t("html_url",r)).assign("user",t("user",E)).assign("title",t("title",r)),D=o({}).assign("name",t("name",r)),R=o({}).assign("action",t("action",h("labeled"))).assign("label",t("label",D)).assign("pullRequest",t("pull_request",U)),d=o({}).assign("event",t("event",R));var p=e=>({kind:"slack-notifier-request-failed",message:e.kind}),k=e=>({kind:"event-decode-failed",message:e}),m=e=>({kind:"slack-notifier-request-succeeded",message:e});var f=e=>q(d.decodeJson(e.context).mapError(k));import{post as H,toHttpTask as J}from"ajaxios";import{Task as C}from"taskarian";import{toUrlT as T}from"@execonline-inc/url";import{get as A,toHttpTask as F}from"ajaxios";var b="https://icanhazdadjoke.com/",N={field:"Accept",value:"application/json"},L=e=>T(e),M=e=>F(A(e.toString()).withHeader(N).withDecoder(l)),g=()=>L(b).andThen(M);var _=e=>`<!subteam^S047GU3AAA0|sre>, <${e.htmlUrl}|@${e.login}> needs a pull request reviewed.`,j=(e,s)=>({channel:s.slackChannel,username:"PRBot",attachments:[{title:`<${e.htmlUrl}|${e.title}>`,pretext:_(e.user),text:`"${s.dadJokeApiResponse.joke}"`,thumb_url:e.user.avatarUrl,mrkdwn_in:["text","pretext"]}]}),P=(e,s)=>J(H(s.slackWebhookUrl).withData(j(e.pullRequest,s))),w=e=>s=>P(e,s).mapError(p).map(m),u=e=>C.succeed({}).assign("dadJokeApiResponse",g).assign("slackChannel",n).assign("slackWebhookUrl",c).andThen(w(e));W.succeed({}).assign("context",i).assign("decodedEvent",f).andThen(({decodedEvent:e})=>u(e.event)).fork(e=>x(JSON.stringify(e)),x);
//# sourceMappingURL=index.js.map
{"version":3,"sources":["../src/index.ts","../src/Environment.ts","../src/Event/index.ts","../src/Decoders.ts","../src/Types.ts","../src/SlackMessage/index.ts","../src/Quote.ts"],"sourcesContent":["import { logWithTimestamp } from '@execonline-inc/logging';\nimport { Task } from 'taskarian';\nimport { readContext } from './Environment';\nimport { decodeEvent } from './Event';\nimport { sendMessage } from './SlackMessage';\nimport { ActionFailed } from './Types';\n\nTask.succeed<ActionFailed, {}>({})\n  .assign('context', readContext)\n  .assign('decodedEvent', decodeEvent)\n  .andThen(({ decodedEvent }) => sendMessage(decodedEvent.event))\n  .fork(err => logWithTimestamp(JSON.stringify(err)), logWithTimestamp);\n","import { readVarT } from '@execonline-inc/environment';\n\nexport const readContext = () => readVarT('GITHUB_CONTEXT');\nexport const slackChannel = () => readVarT('SLACK_CHANNEL');\nexport const slackWebhookUrl = () => readVarT('SLACK_WEBHOOK_URL');\n","import { asTask } from '@execonline-inc/error-handling';\nimport { Task } from 'taskarian';\nimport { messageDecoder } from '../Decoders';\nimport { ActionFailed, Message, eventDecodeFailed } from '../Types';\n\ninterface EventObject {\n  context: string;\n}\n\nexport const decodeEvent = (event: EventObject): Task<ActionFailed, Message> =>\n  asTask(messageDecoder.decodeJson(event.context).mapError<ActionFailed>(eventDecodeFailed));\n","import { stringLiteral } from '@execonline-inc/decoders';\nimport Decoder, { field, string, succeed } from 'jsonous';\nimport { Event, Joke, Label, Links, Message, PullRequest, Self, User } from './Types';\n\nexport const jokeDecoder: Decoder<Joke> = succeed({}).assign('joke', field('joke', string));\n\nconst userDecoder: Decoder<User> = succeed({})\n  .assign('login', field('login', string))\n  .assign('htmlUrl', field('html_url', string))\n  .assign('avatarUrl', field('avatar_url', string));\n\nconst selfDecoder: Decoder<Self> = succeed({}).assign('href', field('href', string));\nconst linksDecoder: Decoder<Links> = succeed({}).assign('self', field('self', selfDecoder));\n\nconst pullRequestDecoder: Decoder<PullRequest> = succeed({})\n  .assign('links', field('_links', linksDecoder))\n  .assign('htmlUrl', field('html_url', string))\n  .assign('user', field('user', userDecoder))\n  .assign('title', field('title', string));\n\nconst labelDecoder: Decoder<Label> = succeed({}).assign('name', field('name', string));\n\nconst eventDecoder: Decoder<Event> = succeed({})\n  .assign('action', field('action', stringLiteral('labeled')))\n  .assign('label', field('label', labelDecoder))\n  .assign('pullRequest', field('pull_request', pullRequestDecoder));\n\nexport const messageDecoder: Decoder<Message> = succeed({}).assign(\n  'event',\n  field('event', eventDecoder),\n);\n","import { MissingVarError } from '@execonline-inc/environment';\nimport { HttpError } from 'ajaxios';\nimport { QuoteError } from './Quote';\n\nexport interface MessageArgs {\n  decodedEvent: Message;\n}\n\nexport type ActionFailed =\n  | MissingVarError\n  | EventDecodeFailed\n  | SlackNotifierRequestFailed\n  | QuoteError;\n\nexport interface SlackNotifierRequestFailed {\n  kind: 'slack-notifier-request-failed';\n  message: string;\n}\n\nexport const slackNotifierRequestFailed = (err: HttpError): SlackNotifierRequestFailed => ({\n  kind: 'slack-notifier-request-failed',\n  message: err.kind,\n});\n\nexport interface EventDecodeFailed {\n  kind: 'event-decode-failed';\n  message: string;\n}\n\nexport const eventDecodeFailed = (err: string): EventDecodeFailed => ({\n  kind: 'event-decode-failed',\n  message: err,\n});\n\nexport interface SlackNotificationSuccess {\n  kind: 'slack-notifier-request-succeeded';\n  message: unknown;\n}\n\nexport const slackNotifierRequestSucceded = (s: unknown): SlackNotificationSuccess => ({\n  kind: 'slack-notifier-request-succeeded',\n  message: s,\n});\n\nexport interface MessageDecoderFailed {\n  kind: 'message-decoder-failed';\n  message: string;\n}\n\nexport interface SlackMessage {\n  dadJokeApiResponse: Joke;\n  slackChannel: string;\n  slackWebhookUrl: string;\n}\nexport interface Joke {\n  joke: string;\n}\nexport interface User {\n  login: string;\n  htmlUrl: string;\n  avatarUrl: string;\n}\n\nexport interface Message {\n  event: Event;\n}\n\nexport type Action = 'labeled';\n\nexport interface Event {\n  action: Action;\n  label: Label;\n  pullRequest: PullRequest;\n}\n\nexport interface Label {\n  name: string;\n}\n\nexport interface PullRequest {\n  links: Links;\n  htmlUrl: string;\n  user: User;\n  title: string;\n}\n\nexport interface Links {\n  self: Self;\n}\n\nexport interface Self {\n  href: string;\n}\n","import { HttpError, post, toHttpTask } from 'ajaxios';\nimport { Task } from 'taskarian';\nimport { slackChannel, slackWebhookUrl } from '../Environment';\nimport { fetchDadJoke } from '../Quote';\nimport {\n  ActionFailed,\n  Event,\n  PullRequest,\n  SlackMessage,\n  SlackNotificationSuccess,\n  SlackNotifierRequestFailed,\n  User,\n  slackNotifierRequestFailed,\n  slackNotifierRequestSucceded,\n} from '../Types';\n\nconst pretext = (user: User) =>\n  `<!subteam^S047GU3AAA0|sre>, <${user.htmlUrl}|@${user.login}> needs a pull request reviewed.`;\n\nconst messageBody = (pullRequest: PullRequest, slackMessage: SlackMessage) => ({\n  channel: slackMessage.slackChannel,\n  username: 'PRBot',\n  attachments: [\n    {\n      title: `<${pullRequest.htmlUrl}|${pullRequest.title}>`,\n      pretext: pretext(pullRequest.user),\n      text: `\"${slackMessage.dadJokeApiResponse.joke}\"`,\n      thumb_url: pullRequest.user.avatarUrl,\n      mrkdwn_in: ['text', 'pretext'],\n    },\n  ],\n});\n\nconst buildRequestT = (event: Event, slackMessage: SlackMessage): Task<HttpError, unknown> =>\n  toHttpTask(\n    post(slackMessage.slackWebhookUrl).withData(messageBody(event.pullRequest, slackMessage)),\n  );\n\nconst postQuoteToSlack = (event: Event) => (\n  slackMessage: SlackMessage,\n): Task<SlackNotifierRequestFailed, SlackNotificationSuccess> =>\n  buildRequestT(event, slackMessage)\n    .mapError(slackNotifierRequestFailed)\n    .map(slackNotifierRequestSucceded);\n\nexport const sendMessage = (event: Event) =>\n  Task.succeed<ActionFailed, {}>({})\n    .assign('dadJokeApiResponse', fetchDadJoke)\n    .assign('slackChannel', slackChannel)\n    .assign('slackWebhookUrl', slackWebhookUrl)\n    .andThen(postQuoteToSlack(event));\n","import { InvalidUrlError, toUrlT, URLParser } from '@execonline-inc/url';\nimport { get, Header, HttpError, toHttpTask } from 'ajaxios';\nimport { Task } from 'taskarian';\nimport { jokeDecoder } from './Decoders';\nimport { Joke } from './Types';\n\nexport type QuoteError = InvalidUrlError | HttpError;\n\nconst href = 'https://icanhazdadjoke.com/';\n\nconst header: Header = { field: 'Accept', value: 'application/json' };\n\nconst validateUrl = (href: string): Task<QuoteError, URLParser> => toUrlT(href);\n\nexport const getJoke = (url: URLParser): Task<QuoteError, Joke> =>\n  toHttpTask(get(url.toString()).withHeader(header).withDecoder(jokeDecoder));\n\nexport const fetchDadJoke = () => validateUrl(href).andThen(getJoke);\n"],"mappings":"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","names":["logWithTimestamp","Task","readVarT","readContext","slackChannel","slackWebhookUrl","asTask","stringLiteral","field","string","succeed","jokeDecoder","userDecoder","selfDecoder","linksDecoder","pullRequestDecoder","labelDecoder","eventDecoder","messageDecoder","slackNotifierRequestFailed","err","eventDecodeFailed","slackNotifierRequestSucceded","s","decodeEvent","event","asTask","messageDecoder","eventDecodeFailed","post","toHttpTask","Task","toUrlT","get","toHttpTask","href","header","validateUrl","toUrlT","getJoke","url","toHttpTask","get","jokeDecoder","fetchDadJoke","pretext","user","messageBody","pullRequest","slackMessage","buildRequestT","event","toHttpTask","post","postQuoteToSlack","slackNotifierRequestFailed","slackNotifierRequestSucceded","sendMessage","Task","fetchDadJoke","slackChannel","slackWebhookUrl","Task","readContext","decodeEvent","decodedEvent","sendMessage","err","logWithTimestamp"]}